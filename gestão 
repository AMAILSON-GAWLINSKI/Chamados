```html
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Sistema completo de gestão empresarial">
    <meta name="keywords" content="gestão, empresa, funcionários, ativos, ramais, férias">
    <meta name="author" content="Sistema de Gestão Integrada">
    <title>Record - Sistema de Gestão</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Bibliotecas para exportação -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
    
    <!-- html2canvas para captura de tela -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    
    <!-- Supabase -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    
    <style>
        /* VARIÁVEIS DE CORES E DIMENSÕES */
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3a0ca3;
            --success-color: #4cc9f0;
            --warning-color: #f6c23e;
            --danger-color: #e74a3b;
            --light-bg: #f8f9fc;
            --dark-text: #2d3748;
            --light-card: #ffffff;
            --light-border: #e3e6f0;
            --transition-speed: 0.3s;
            --sidebar-width: 260px;
            --header-height: 70px;
            --shadow-sm: 0 2px 4px rgba(0,0,0,0.05);
            --shadow-md: 0 4px 6px rgba(0,0,0,0.07);
            --shadow-lg: 0 10px 15px rgba(0,0,0,0.1);
        }

        /* ESTILOS GERAIS */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-bg);
            color: var(--dark-text);
            line-height: 1.6;
        }

        /* LAYOUT PRINCIPAL */
        .app-container {
            display: flex;
            min-height: 100vh;
        }

        /* SIDEBAR */
        .sidebar {
            width: var(--sidebar-width);
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            padding-top: var(--header-height);
            z-index: 1000;
            box-shadow: var(--shadow-lg);
            transition: transform var(--transition-speed) ease;
            overflow-y: auto;
        }

        .sidebar.collapsed {
            transform: translateX(-100%);
        }

        .sidebar-header {
            padding: 1.25rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            text-align: center;
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            background-color: rgba(0, 0, 0, 0.1);
            height: var(--header-height);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .sidebar-header h2 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 600;
        }

        .sidebar-menu {
            list-style: none;
            padding: 1rem 0;
            margin: 0;
        }

        .sidebar-menu li {
            margin-bottom: 0.25rem;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            color: rgba(255, 255, 255, 0.85);
            text-decoration: none;
            padding: 0.85rem 1.25rem;
            border-radius: 8px;
            transition: all var(--transition-speed) ease;
            margin: 0 0.5rem;
            font-weight: 500;
        }

        .sidebar-menu a:hover,
        .sidebar-menu a.active {
            background-color: rgba(255, 255, 255, 0.15);
            color: white;
            transform: translateX(5px);
        }

        .sidebar-menu i {
            width: 20px;
            margin-right: 0.75rem;
            font-size: 1.1rem;
        }

        /* CONTEÚDO PRINCIPAL */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            transition: margin-left var(--transition-speed) ease;
            display: flex;
            flex-direction: column;
        }

        .main-content.expanded {
            margin-left: 0;
        }

        /* HEADER */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 1.75rem;
            background-color: var(--light-card);
            border-bottom: 1px solid var(--light-border);
            height: var(--header-height);
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: var(--shadow-sm);
        }

        .header-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .toggle-sidebar {
            background: none;
            border: none;
            font-size: 1.25rem;
            cursor: pointer;
            color: var(--dark-text);
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            transition: var(--transition-speed);
        }

        .toggle-sidebar:hover {
            background-color: var(--light-bg);
            color: var(--primary-color);
        }

        .user-actions {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .btn-icon {
            background: none;
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: var(--dark-text);
            transition: var(--transition-speed);
            font-size: 1.1rem;
            position: relative;
        }

        .btn-icon:hover {
            background-color: var(--light-bg);
            color: var(--primary-color);
        }

        /* CONTEÚDO */
        .content {
            padding: 1.75rem;
            flex: 1;
            overflow-y: auto;
        }

        /* SEÇÕES */
        .section {
            display: none;
            animation: fadeIn 0.3s ease;
        }

        .section.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* CARDS */
        .card {
            background: var(--light-card);
            border: none;
            border-radius: 12px;
            box-shadow: var(--shadow-md);
            transition: var(--transition-speed);
            margin-bottom: 1.5rem;
            overflow: hidden;
        }

        .card:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-lg);
        }

        .card-header {
            background-color: var(--light-card);
            border-bottom: 1px solid var(--light-border);
            padding: 1.25rem 1.5rem;
            border-radius: 12px 12px 0 0 !important;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-header.bg-light {
            background-color: var(--light-bg) !important;
        }

        /* STATS GRID */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.75rem;
            margin-bottom: 1.75rem;
        }

        .stat-card {
            background: var(--light-card);
            border-radius: 12px;
            padding: 1.75rem;
            display: flex;
            align-items: center;
            gap: 1.25rem;
            box-shadow: var(--shadow-md);
            transition: var(--transition-speed);
            border-left: 4px solid transparent;
        }

        .stat-card:hover {
            box-shadow: var(--shadow-lg);
            transform: translateY(-3px);
        }

        .stat-card.primary { border-left-color: var(--primary-color); }
        .stat-card.success { border-left-color: var(--success-color); }
        .stat-card.warning { border-left-color: var(--warning-color); }
        .stat-card.danger { border-left-color: var(--danger-color); }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            flex-shrink: 0;
        }

        .stat-icon.primary {
            background-color: rgba(67, 97, 238, 0.12);
            color: var(--primary-color);
        }

        .stat-icon.success {
            background-color: rgba(76, 201, 240, 0.12);
            color: var(--success-color);
        }

        .stat-icon.warning {
            background-color: rgba(246, 194, 62, 0.12);
            color: var(--warning-color);
        }

        .stat-icon.danger {
            background-color: rgba(231, 74, 59, 0.12);
            color: var(--danger-color);
        }

        .stat-content {
            flex: 1;
        }

        .stat-value {
            font-size: 1.875rem;
            font-weight: 700;
            color: var(--dark-text);
            line-height: 1;
            margin-bottom: 0.375rem;
        }

        .stat-label {
            color: #6c757d;
            font-size: 0.95rem;
            font-weight: 500;
        }

        /* SECTION TITLE */
        .section-title {
            font-weight: 600;
            color: var(--dark-text);
            position: relative;
            padding-bottom: 0.75rem;
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
        }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 50px;
            height: 3px;
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            border-radius: 3px;
        }

        /* ALERTAS */
        .alert-container {
            position: fixed;
            top: 90px;
            right: 20px;
            z-index: 1100;
            max-width: 400px;
        }

        .alert {
            padding: 1rem 1.25rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            animation: slideInRight 0.3s ease;
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
            box-shadow: var(--shadow-lg);
            border-left: 4px solid transparent;
        }

        @keyframes slideInRight {
            from { opacity: 0; transform: translateX(100%); }
            to { opacity: 1; transform: translateX(0); }
        }

        .alert-success {
            background-color: #f0f9f0;
            color: #0f5132;
            border-left-color: #27ae60;
        }

        .alert-error {
            background-color: #fdf3f3;
            color: #842029;
            border-left-color: #e74c3c;
        }

        .alert-warning {
            background-color: #fffef0;
            color: #664d03;
            border-left-color: #f39c12;
        }

        .alert-info {
            background-color: #f0f9ff;
            color: #055160;
            border-left-color: #3498db;
        }

        .alert-icon {
            font-size: 1.25rem;
            flex-shrink: 0;
        }

        .alert-content {
            flex: 1;
            font-size: 0.9rem;
        }

        .alert-close {
            background: none;
            border: none;
            font-size: 1.25rem;
            cursor: pointer;
            color: inherit;
            opacity: 0.7;
            transition: var(--transition-speed);
            padding: 0;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .alert-close:hover {
            opacity: 1;
        }

        /* TABELAS */
        .table {
            border-collapse: separate;
            border-spacing: 0;
            width: 100%;
            margin-bottom: 0;
        }

        .table th {
            background-color: var(--light-bg);
            font-weight: 600;
            color: var(--dark-text);
            padding: 12px 15px;
            border-top: 1px solid #dee2e6;
            font-size: 0.9rem;
            text-align: center;
            vertical-align: middle;
        }

        .table td {
            padding: 12px 15px;
            vertical-align: middle;
            font-size: 0.9rem;
            text-align: center;
        }

        .table-hover tbody tr {
            transition: background-color 0.2s ease;
        }

        .table-hover tbody tr:hover {
            background-color: rgba(13, 110, 253, 0.05);
        }

        /* BADGES DE STATUS */
        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
            display: inline-block;
            text-align: center;
            min-width: 80px;
        }

        .status-active {
            background-color: rgba(25, 135, 84, 0.1);
            color: #198754;
        }

        .status-inactive {
            background-color: rgba(220, 53, 69, 0.1);
            color: #dc3545;
        }

        .status-vacation {
            background-color: rgba(245, 124, 0, 0.12);
            color: #f39c12;
        }

        .status-pending {
            background-color: rgba(255, 193, 7, 0.1);
            color: #ffc107;
        }

        .status-approved {
            background-color: rgba(25, 135, 84, 0.1);
            color: #198754;
        }

        .status-cancelled {
            background-color: rgba(220, 53, 69, 0.1);
            color: #dc3545;
        }

        .status-maintenance {
            background-color: rgba(255, 193, 7, 0.1);
            color: #ffc107;
        }

        .status-reserve {
            background-color: rgba(108, 117, 125, 0.1);
            color: #6c757d;
        }

        .status-in-progress {
            background-color: rgba(13, 110, 253, 0.1);
            color: #0d6efd;
        }

        .status-completed {
            background-color: rgba(25, 135, 84, 0.1);
            color: #198754;
        }

        /* BOTÕES */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.75rem 1.25rem;
            border: none;
            border-radius: 8px;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition-speed);
            line-height: 1;
        }

        .btn-primary {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            color: white;
            border: none;
        }

        .btn-primary:hover {
            background: linear-gradient(to right, var(--secondary-color), var(--primary-color));
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .btn-outline-primary {
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
            font-weight: 500;
            border-radius: 8px;
            transition: var(--transition-speed);
            background: transparent;
        }

        .btn-outline-primary:hover {
            background-color: var(--primary-color);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.3);
        }

        /* FORMULÁRIOS */
        .form-label {
            font-weight: 600;
            color: var(--dark-text);
            margin-bottom: 6px;
            font-size: 0.9rem;
        }

        .form-control, .form-select {
            border-radius: 6px;
            padding: 10px 15px;
            border: 1px solid #ddd;
            transition: all 0.3s;
            background-color: var(--light-card);
            color: var(--dark-text);
            font-size: 0.9rem;
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        /* MODAL */
        .modal-content {
            border-radius: 12px;
            border: none;
            box-shadow: var(--shadow-lg);
        }

        .modal-header {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            color: white;
            border-radius: 12px 12px 0 0;
            padding: 15px 20px;
        }

        /* SEARCH BOX */
        .search-box {
            position: relative;
        }
        
        .search-box i {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            z-index: 5;
        }
        
        .search-box input {
            padding-left: 40px;
        }
        
        /* ACTION BUTTONS */
        .action-buttons {
            display: flex;
            gap: 5px;
            justify-content: center;
        }
        
        /* EXPORT BUTTONS */
        .export-buttons {
            display: flex;
            gap: 10px;
        }
        
        /* DASHBOARD TABS */
        .dashboard-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .dashboard-tab {
            padding: 10px 20px;
            background-color: var(--light-bg);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            border: 1px solid var(--light-border);
            font-weight: 500;
        }
        
        .dashboard-tab.active {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            color: white;
            border-color: var(--primary-color);
        }
        
        .dashboard-tab:hover {
            background-color: #e9ecef;
        }
        
        .dashboard-tab.active:hover {
            background: linear-gradient(to right, var(--secondary-color), var(--primary-color));
        }
        
        .dashboard-tab-content {
            display: none;
        }
        
        .dashboard-tab-content.active {
            display: block;
        }
        
        /* CHART CONTAINERS */
        .chart-container {
            position: relative;
            height: 300px;
            margin-bottom: 20px;
        }
        
        /* VACATION ALERT MODAL */
        .vacation-alert-item {
            padding: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .vacation-alert-item:last-child {
            border-bottom: none;
        }

        /* LOADING SPINNER */
        .loading-spinner {
            display: inline-block;
            width: 2rem;
            height: 2rem;
            border: 3px solid rgba(67, 97, 238, 0.3);
            border-radius: 50%;
            border-top-color: var(--primary-color);
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* CAMPOS OBRIGATÓRIOS */
        .required-field::after {
            content: " *";
            color: #dc3545;
        }

        /* IMPORT CSV BUTTON */
        .btn-csv {
            background-color: #28a745;
            color: white;
            border: none;
        }

        .btn-csv:hover {
            background-color: #218838;
            color: white;
        }

        /* POPUP DE CONFIRMAÇÃO */
        .confirmation-popup {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .confirmation-content {
            background: white;
            padding: 30px;
            border-radius: 10px;
            text-align: center;
            max-width: 400px;
            width: 90%;
        }

        /* ESTILOS PARA CAMPOS CONDICIONAIS */
        .conditional-field {
            display: none;
        }

        /* ESTILOS PARA QR CODE */
        .qr-code-container {
            text-align: center;
            margin: 15px 0;
        }

        .qr-code-image {
            max-width: 100px;
            height: auto;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 5px;
            background: white;
        }

        .qr-code-download {
            margin-top: 10px;
        }

        /* ESTILO PARA GRÁFICO DE ATIVOS */
        .ativos-chart-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .ativos-total {
            font-size: 3rem;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .ativos-legenda {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }

        .ativos-legenda-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .ativos-legenda-color {
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }

        .ativos-ativos {
            background-color: #28a745;
        }

        .ativos-inativos {
            background-color: #dc3545;
        }

        /* NOVOS ESTILOS PARA OS NOVOS GRÁFICOS */
        .gauge-container {
            position: relative;
            width: 250px;
            height: 188px;
            margin: 0 auto;
        }
        
        .gauge-value {
            position: absolute;
            top: 60%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 24px;
            font-weight: bold;
            color: var(--dark-text);
        }
        
        .gauge-label {
            position: absolute;
            top: 80%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 14px;
            color: #6c757d;
        }

        /* BARRA DE PROGRESSO PARA PROJETOS */
        .progress-container {
            margin-top: 15px;
        }

        .progress-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }

        .progress {
            height: 10px;
            border-radius: 5px;
        }

        /* RESPONSIVIDADE */
        @media (max-width: 992px) {
            .sidebar {
                transform: translateX(-100%);
            }
            
            .sidebar.active {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0;
            }
            
            .stats-grid {
                grid-template-columns: 1fr 1fr;
            }
        }
        
        @media (max-width: 768px) {
            .content {
                padding: 1.25rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .header {
                padding: 1rem 1.25rem;
            }
            
            .user-info span:not(.user-avatar) {
                display: none;
            }

            .dashboard-tabs {
                flex-direction: column;
            }
        }
        
        @media (max-width: 576px) {
            .content {
                padding: 1rem;
            }
            
            .card-body {
                padding: 1.25rem;
            }
            
            .card-header {
                padding: 1rem 1.25rem;
            }
            
            .header {
                padding: 0.875rem 1rem;
            }
            
            .stat-card {
                padding: 1.5rem;
            }
            
            .stat-icon {
                width: 50px;
                height: 50px;
                font-size: 1.25rem;
            }
            
            .stat-value {
                fontSize: 1.5rem;
            }

            .modal-dialog {
                margin: 0.5rem;
            }
        }

        /* ACESSIBILIDADE */
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }
        
        /* FOCUS STYLES FOR KEYBOARD NAVIGATION */
        .btn:focus, .form-control:focus, .form-select:focus {
            outline: 2px solid var(--primary-color);
            outline-offset: 2px;
        }

        /* PRINT STYLES */
        @media print {
            .sidebar, .header, .btn, .alert-container {
                display: none !important;
            }
            
            .main-content {
                margin-left: 0 !important;
            }
            
            .card {
                box-shadow: none !important;
                border: 1px solid #ddd !important;
            }
        }

        /* ESTILOS DO CONTROLE DE PONTO - ATUALIZADOS */
        #pontoSection .ponto-container {
            max-width: 800px;
            margin: 0 auto;
        }

        #pontoSection .card-header {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            color: white;
        }

        #pontoSection .card-header h5 {
            color: white;
            margin: 0;
        }

        #pontoSection .form-section {
            margin-bottom: 25px;
            padding: 20px;
            background-color: var(--light-bg);
            border-radius: 10px;
            border-left: 4px solid var(--primary-color);
        }

        #pontoSection .form-section h6 {
            font-weight: 600;
            margin-bottom: 15px;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        #pontoSection .form-section h6 i {
            font-size: 1.1rem;
        }

        #pontoSection .checkbox-group {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            padding: 12px 15px;
            background-color: white;
            border-radius: 8px;
            border: 1px solid var(--light-border);
        }

        #pontoSection .checkbox-group input {
            width: auto;
            margin-right: 10px;
        }

        #pontoSection .checkbox-group label {
            margin: 0;
            font-weight: 500;
        }

        #pontoSection .btn-ponto {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            width: 100%;
            margin-top: 10px;
            transition: var(--transition-speed);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        #pontoSection .btn-ponto:hover {
            background: linear-gradient(to right, var(--secondary-color), var(--primary-color));
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        #pontoSection .result {
            margin-top: 25px;
            padding: 20px;
            background-color: var(--light-bg);
            border-radius: 10px;
            display: none;
            border-left: 4px solid var(--primary-color);
        }

        #pontoSection .result h5 {
            margin-top: 0;
            color: var(--dark-text);
            border-bottom: 1px solid var(--light-border);
            padding-bottom: 12px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        #pontoSection .result h5 i {
            color: var(--primary-color);
        }

        #pontoSection .result-item {
            margin-bottom: 12px;
            display: flex;
            justify-content: space-between;
            padding: 12px 15px;
            border-radius: 8px;
            background-color: white;
            border-left: 4px solid transparent;
        }

        #pontoSection .result-item.saida {
            background-color: rgba(67, 97, 238, 0.1);
            border-left: 4px solid var(--primary-color);
            font-weight: bold;
        }

        #pontoSection .result-item.diferenca {
            background-color: rgba(76, 201, 240, 0.1);
            border-left: 4px solid var(--success-color);
            font-weight: bold;
        }

        #pontoSection .result-item.alerta {
            background-color: rgba(246, 194, 62, 0.1);
            border-left: 4px solid var(--warning-color);
            font-weight: bold;
        }

        #pontoSection .result-item.positivo {
            color: #198754;
        }

        #pontoSection .result-item.negativo {
            color: #dc3545;
        }

        #pontoSection .result-item strong {
            color: var(--dark-text);
        }

        #pontoSection .total-info {
            font-weight: bold;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px dashed var(--light-border);
            color: var(--primary-color);
            text-align: center;
            font-size: 1.1rem;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* ESTILO DO POP DE ALERTA */
        .popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .popup-alert {
            background-color: white;
            padding: 25px;
            border-radius: 10px;
            width: 90%;
            max-width: 400px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            text-align: center;
            animation: popIn 0.3s;
        }

        @keyframes popIn {
            from { transform: scale(0.8); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }

        .popup-alert h2 {
            color: #d9534f;
            margin-bottom: 15px;
            font-size: 20px;
        }

        .popup-alert p {
            margin-bottom: 20px;
            line-height: 1.5;
        }

        .popup-alert button {
            background-color: #d9534f;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            width: auto;
            margin: 0 auto;
        }

        .popup-alert button:hover {
            background-color: #c9302c;
        }

        /* ESTILOS PARA BARRA DE PROGRESSO DE FÉRIAS */
        .vacation-progress-container {
            margin-top: 15px;
        }

        .vacation-progress-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
            font-size: 0.85rem;
        }

        .vacation-progress {
            height: 10px;
            border-radius: 5px;
            background-color: #e9ecef;
        }

        .vacation-progress-bar {
            height: 100%;
            border-radius: 5px;
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            transition: width 0.3s ease;
        }

        /* SINC STATUS */
        .sync-status {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.8rem;
            color: #6c757d;
        }

        .sync-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #28a745;
        }

        .sync-indicator.syncing {
            background-color: #ffc107;
            animation: pulse 1.5s infinite;
        }

        .sync-indicator.error {
            background-color: #dc3545;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        /* NOVOS ESTILOS PARA SELEÇÃO DE ATIVOS */
        .select-all-checkbox {
            margin-right: 10px;
        }

        .asset-checkbox {
            margin: 0 5px;
        }

        .batch-actions {
            margin-bottom: 15px;
            padding: 15px;
            background-color: var(--light-bg);
            border-radius: 8px;
            display: none;
        }

        .batch-actions.active {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .selected-count {
            font-weight: 600;
            color: var(--primary-color);
        }

        /* ESTILOS PARA MODAL DE QR CODE */
        .qr-code-modal .modal-dialog {
            max-width: 400px;
        }

        .qr-code-preview {
            text-align: center;
            padding: 20px;
        }

        .qr-code-preview img {
            max-width: 100%;
            height: auto;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 10px;
            background: white;
        }

        .qr-code-info {
            margin-top: 15px;
            padding: 15px;
            background-color: var(--light-bg);
            border-radius: 8px;
        }

        .qr-code-info h6 {
            margin-bottom: 10px;
            color: var(--primary-color);
        }

        /* BADGES DE PRIORIDADE */
        .priority-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
            display: inline-block;
            text-align: center;
            min-width: 80px;
        }

        .priority-low {
            background-color: rgba(25, 135, 84, 0.1);
            color: #198754;
        }

        .priority-medium {
            background-color: rgba(255, 193, 7, 0.1);
            color: #ffc107;
        }

        .priority-high {
            background-color: rgba(253, 126, 20, 0.1);
            color: #fd7e14;
        }

        .priority-urgent {
            background-color: rgba(220, 53, 69, 0.1);
            color: #dc3545;
        }
    </style>
</head>
<body>
    <!-- Aplicação Principal -->
    <div id="app" class="app-container">
        <!-- Sidebar -->
        <nav class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h2>Record</h2>
            </div>
            <ul class="sidebar-menu">
                <li><a href="#dashboard" class="active" data-section="dashboard"><i class="fas fa-chart-bar"></i> <span>Dashboard</span></a></li>
                <li><a href="#employees" data-section="employees"><i class="fas fa-users"></i> <span>Funcionários</span></a></li>
                <li><a href="#extensions" data-section="extensions"><i class="fas fa-phone"></i> <span>Ramais</span></a></li>
                <li><a href="#assets" data-section="assets"><i class="fas fa-laptop"></i> <span>Ativos</span></a></li>
                <li><a href="#vacations" data-section="vacations"><i class="fas fa-umbrella-beach"></i> <span>Férias</span></a></li>
                <li><a href="#projects" data-section="projects"><i class="fas fa-tasks"></i> <span>Projetos</span></a></li>
                <li><a href="#ponto" data-section="ponto"><i class="fas fa-clock"></i> <span>Controle de Ponto</span></a></li>
            </ul>
        </nav>

        <!-- Conteúdo Principal -->
        <main class="main-content" id="mainContent">
            <header class="header">
                <div class="header-actions">
                    <button class="toggle-sidebar" id="toggleSidebar" aria-label="Alternar menu">
                        <i class="fas fa-bars"></i>
                    </button>
                    <h1 id="pageTitle" class="h4 mb-0">Dashboard</h1>
                </div>
                <div class="user-actions">
                    <div class="real-time-clock" id="headerClock">
                        <!-- Relógio em tempo real será inserido aqui -->
                    </div>
                    <div class="sync-status" id="syncStatus">
                        <div class="sync-indicator" id="syncIndicator"></div>
                        <span id="syncText">Sincronizado</span>
                    </div>
                    <button class="btn-icon" title="Notificações" id="vacationAlertButton">
                        <i class="fas fa-bell"></i>
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="vacationAlertCount">0</span>
                    </button>
                </div>
            </header>

            <!-- Alertas -->
            <div id="alertContainer" class="alert-container"></div>

            <!-- Conteúdo -->
            <div class="content">
                <!-- Dashboard Section -->
                <section id="dashboardSection" class="section active">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="section-title">Dashboard</h2>
                        <div>
                            <button class="btn btn-outline-primary me-2" id="refreshDashboard">
                                <i class="fas fa-sync-alt"></i> Atualizar
                            </button>
                            <div class="btn-group">
                                <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-download"></i> Exportar
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" id="exportPDF">PDF</a></li>
                                    <li><a class="dropdown-item" href="#" id="exportExcel">Excel</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div class="dashboard-tabs">
                        <div class="dashboard-tab active" data-tab="overview">Visão Geral</div>
                        <div class="dashboard-tab" data-tab="employees">Funcionários</div>
                        <div class="dashboard-tab" data-tab="assets">Ativos</div>
                        <div class="dashboard-tab" data-tab="vacations">Férias</div>
                        <div class="dashboard-tab" data-tab="projects">Projetos</div>
                    </div>

                    <div id="dashboardTabContent">
                        <!-- Visão Geral -->
                        <div id="overviewTab" class="dashboard-tab-content active">
                            <div class="stats-grid">
                                <div class="stat-card primary">
                                    <div class="stat-icon primary">
                                        <i class="fas fa-users"></i>
                                    </div>
                                    <div class="stat-content">
                                        <div class="stat-value" id="totalEmployees">0</div>
                                        <div class="stat-label">Funcionários</div>
                                    </div>
                                </div>
                                <div class="stat-card success">
                                    <div class="stat-icon success">
                                        <i class="fas fa-laptop"></i>
                                    </div>
                                    <div class="stat-content">
                                        <div class="stat-value" id="totalAssets">0</div>
                                        <div class="stat-label">Ativos de TI</div>
                                    </div>
                                </div>
                                <div class="stat-card warning">
                                    <div class="stat-icon warning">
                                        <i class="fas fa-umbrella-beach"></i>
                                    </div>
                                    <div class="stat-content">
                                        <div class="stat-value" id="onVacation">0</div>
                                        <div class="stat-label">Em Férias</div>
                                    </div>
                                </div>
                                <div class="stat-card danger">
                                    <div class="stat-icon danger">
                                        <i class="fas fa-exclamation-triangle"></i>
                                    </div>
                                    <div class="stat-content">
                                        <div class="stat-value" id="pendingTasks">0</div>
                                        <div class="stat-label">Tarefas Pendentes</div>
                                    </div>
                                </div>
                            </div>

                            <div class="row mt-4">
                                <!-- Gráfico Gauge (Velocímetro) -->
                                <div class="col-lg-4">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5 class="mb-0">Progresso de Projetos</h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="gauge-container">
                                                <canvas id="gaugeChart" width="250" height="188"></canvas>
                                                <div class="gauge-value" id="gaugeValue">0%</div>
                                                <div class="gauge-label">Conclusão</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Gráfico Geral -->
                                <div class="col-lg-8">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5 class="mb-0">Desempenho Geral</h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="chart-container">
                                                <canvas id="generalChart"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row mt-4">
                                <div class="col-lg-8">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5 class="mb-0">Visão Geral do Sistema</h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="chart-container">
                                                <canvas id="overviewChart"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5 class="mb-0">Status dos Ativos</h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="chart-container">
                                                <canvas id="ativosMergedChart"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Funcionários -->
                        <div id="employeesTab" class="dashboard-tab-content">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="mb-0">Distribuição por Departamento</h5>
                                    <div class="export-buttons">
                                        <button class="btn btn-outline-primary btn-sm" id="exportEmployeesPDF">
                                            <i class="fas fa-file-pdf"></i> PDF
                                        </button>
                                        <button class="btn btn-outline-primary btn-sm" id="exportEmployeesExcel">
                                            <i class="fas fa-file-excel"></i> Excel
                                        </button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="chart-container">
                                        <canvas id="employeeDoughnutChart"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Ativos -->
                        <div id="assetsTab" class="dashboard-tab-content">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="mb-0">Distribuição e Status dos Ativos</h5>
                                    <div class="export-buttons">
                                        <button class="btn btn-outline-primary btn-sm" id="exportAssetsPDF">
                                            <i class="fas fa-file-pdf"></i> PDF
                                        </button>
                                        <button class="btn btn-outline-primary btn-sm" id="exportAssetsExcel">
                                            <i class="fas fa-file-excel"></i> Excel
                                        </button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="chart-container">
                                        <canvas id="ativosPieChart"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Férias -->
                        <div id="vacationsTab" class="dashboard-tab-content">
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5 class="mb-0">Solicitações de Férias</h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="chart-container">
                                                <canvas id="vacationRadarChart"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5 class="mb-0">Férias por Mês</h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="chart-container">
                                                <canvas id="vacationMonthChart"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Projetos -->
                        <div id="projectsTab" class="dashboard-tab-content">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="mb-0">Status dos Projetos</h5>
                                </div>
                                <div class="card-body">
                                    <div class="chart-container">
                                        <canvas id="projectDoughnutChart"></canvas>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Gráfico de Progresso dos Projetos -->
                            <div class="card mt-4">
                                <div class="card-header">
                                    <h5 class="mb-0">Progresso dos Projetos</h5>
                                </div>
                                <div class="card-body">
                                    <div class="gauge-container">
                                        <canvas id="projetosGaugeChart" width="250" height="188"></canvas>
                                        <div class="gauge-value" id="projetosGaugeValue">0%</div>
                                        <div class="gauge-label">Conclusão</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Funcionários Section -->
                <section id="employeesSection" class="section">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="section-title">Funcionários</h2>
                        <div>
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addEmployeeModal">
                                <i class="fas fa-plus"></i> Novo Funcionário
                            </button>
                            <button class="btn btn-csv ms-2" id="importEmployeesCSV">
                                <i class="fas fa-file-import"></i> Importar CSV
                            </button>
                            <input type="file" id="csvEmployeesFileInput" accept=".csv" style="display: none;">
                            <div class="btn-group ms-2">
                                <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-download"></i> Exportar
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" id="exportEmployeesListPDF">PDF</a></li>
                                    <li><a class="dropdown-item" href="#" id="exportEmployeesListExcel">Excel</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Lista de Funcionários</h5>
                            <div class="search-box">
                                <i class="fas fa-search"></i>
                                <input type="text" class="form-control" id="searchEmployees" placeholder="Buscar funcionários...">
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover" id="employeesTable">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Nome</th>
                                            <th>Email</th>
                                            <th>Cargo</th>
                                            <th>Departamento</th>
                                            <th>Status</th>
                                            <th>Ações</th>
                                        </tr>
                                    </thead>
                                    <tbody id="employeesTableBody">
                                        <!-- Dados serão carregados via JavaScript -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Ramais Section -->
                <section id="extensionsSection" class="section">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="section-title">Ramais</h2>
                        <div>
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addExtensionModal">
                                <i class="fas fa-plus"></i> Novo Ramal
                            </button>
                            <div class="btn-group ms-2">
                                <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-download"></i> Exportar
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" id="exportExtensionsPDF">PDF</a></li>
                                    <li><a class="dropdown-item" href="#" id="exportExtensionsExcel">Excel</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Lista de Ramais</h5>
                            <div class="search-box">
                                <i class="fas fa-search"></i>
                                <input type="text" class="form-control" id="searchExtensions" placeholder="Buscar ramais...">
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover" id="extensionsTable">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Número</th>
                                            <th>Responsável</th>
                                            <th>Departamento</th>
                                            <th>Localização</th>
                                            <th>Status</th>
                                            <th>Ações</th>
                                        </tr>
                                    </thead>
                                    <tbody id="extensionsTableBody">
                                        <!-- Dados serão carregados via JavaScript -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Ativos Section -->
                <section id="assetsSection" class="section">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="section-title">Ativos</h2>
                        <div>
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addAssetModal">
                                <i class="fas fa-plus"></i> Novo Ativo
                            </button>
                            <button class="btn btn-csv ms-2" id="importAssetsCSV">
                                <i class="fas fa-file-import"></i> Importar CSV
                            </button>
                            <input type="file" id="csvFileInput" accept=".csv" style="display: none;">
                            <button class="btn btn-outline-success ms-2" id="exportQRCodeBatch">
                                <i class="fas fa-qrcode"></i> Exportar QR Codes
                            </button>
                            <div class="btn-group ms-2">
                                <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-download"></i> Exportar
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" id="exportAssetsListPDF">PDF</a></li>
                                    <li><a class="dropdown-item" href="#" id="exportAssetsListExcel">Excel</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <!-- Ações em Lote -->
                    <div class="batch-actions" id="batchActions">
                        <span class="selected-count" id="selectedCount">0</span> ativos selecionados
                        <button class="btn btn-outline-primary btn-sm" id="selectAllAssets">
                            <i class="fas fa-check-square"></i> Selecionar Todos
                        </button>
                        <button class="btn btn-outline-secondary btn-sm" id="deselectAllAssets">
                            <i class="fas fa-times-circle"></i> Desmarcar Todos
                        </button>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Lista de Ativos</h5>
                            <div class="search-box">
                                <i class="fas fa-search"></i>
                                <input type="text" class="form-control" id="searchAssets" placeholder="Buscar ativos...">
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover" id="assetsTable">
                                    <thead>
                                        <tr>
                                            <th width="30">
                                                <input type="checkbox" class="form-check-input select-all-checkbox" id="selectAllCheckbox">
                                            </th>
                                            <th>ID</th>
                                            <th>Nome</th>
                                            <th>Tipo</th>
                                            <th>Modelo</th>
                                            <th>Polegadas</th>
                                            <th>Descrição</th>
                                            <th>Número de Série</th>
                                            <th>Responsável</th>
                                            <th>Status</th>
                                            <th>QR Code</th>
                                            <th>Ações</th>
                                        </tr>
                                    </thead>
                                    <tbody id="assetsTableBody">
                                        <!-- Dados serão carregados via JavaScript -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Férias Section -->
                <section id="vacationsSection" class="section">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="section-title">Férias</h2>
                        <div>
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addVacationModal">
                                <i class="fas fa-plus"></i> Nova Solicitação
                            </button>
                            <div class="btn-group ms-2">
                                <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-download"></i> Exportar
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" id="exportVacationsListPDF">PDF</a></li>
                                    <li><a class="dropdown-item" href="#" id="exportVacationsListExcel">Excel</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Lista de Férias</h5>
                            <div class="search-box">
                                <i class="fas fa-search"></i>
                                <input type="text" class="form-control" id="searchVacations" placeholder="Buscar férias...">
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover" id="vacationsTable">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Funcionário</th>
                                            <th>Progresso</th>
                                            <th>Dias</th>
                                            <th>Status</th>
                                            <th>Ações</th>
                                        </tr>
                                    </thead>
                                    <tbody id="vacationsTableBody">
                                        <!-- Dados serão carregados via JavaScript -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Projetos Section -->
                <section id="projectsSection" class="section">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="section-title">Projetos</h2>
                        <div>
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProjectModal">
                                <i class="fas fa-plus"></i> Novo Projeto
                            </button>
                            <div class="btn-group ms-2">
                                <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-download"></i> Exportar
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" id="exportProjectsListPDF">PDF</a></li>
                                    <li><a class="dropdown-item" href="#" id="exportProjectsListExcel">Excel</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Lista de Projetos</h5>
                            <div class="search-box">
                                <i class="fas fa-search"></i>
                                <input type="text" class="form-control" id="searchProjects" placeholder="Buscar projetos...">
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover" id="projectsTable">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Nome</th>
                                            <th>Responsável</th>
                                            <th>Prioridade</th>
                                            <th>Progresso</th>
                                            <th>Status</th>
                                            <th>Ações</th>
                                        </tr>
                                    </thead>
                                    <tbody id="projectsTableBody">
                                        <!-- Dados serão carregados via JavaScript -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Controle de Ponto Section - ATUALIZADO -->
                <section id="pontoSection" class="section">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="section-title">Controle de Ponto</h2>
                    </div>

                    <div class="ponto-container">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">Calculadora de Ponto</h5>
                            </div>
                            <div class="card-body">
                                <div class="form-section">
                                    <h6><i class="fas fa-cog"></i> Configurações</h6>
                                    
                                    <div class="checkbox-group">
                                        <input type="checkbox" id="trabalha-sabado">
                                        <label for="trabalha-sabado" class="form-label">Trabalha no sábado?</label>
                                    </div>
                                    
                                    <div id="automatic-fields">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="entrada-auto" class="form-label required-field">Horário de Entrada</label>
                                                <input type="time" class="form-control" id="entrada-auto" required>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="jornada-type" class="form-label required-field">Tipo de Jornada</label>
                                                <select class="form-select" id="jornada-type">
                                                    <option value="6.25">6h15min</option>
                                                    <option value="7.25">7h15min</option>
                                                    <option value="8">8 horas</option>
                                                    <option value="9">9h (sábado)</option>
                                                    <option value="9.8">9h48min</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="intervalo-auto" class="form-label">Duração do Intervalo (minutos)</label>
                                            <input type="number" class="form-control" id="intervalo-auto" min="15" max="120" step="15" value="60">
                                        </div>
                                    </div>
                                    
                                    <button class="btn-ponto" id="calcularPonto">
                                        <i class="fas fa-calculator"></i> Calcular Horários
                                    </button>
                                </div>
                                
                                <div id="resultado" class="result">
                                    <h5><i class="fas fa-list-alt"></i> Horários do Dia</h5>
                                    <div class="result-item"><strong>Entrada:</strong> <span id="entrada-resultado"></span></div>
                                    <div class="result-item"><strong>Saída para Intervalo:</strong> <span id="saida-intervalo-resultado"></span></div>
                                    <div class="result-item"><strong>Retorno do Intervalo:</strong> <span id="retorno-intervalo-resultado"></span></div>
                                    <div class="result-item saida"><strong>SAÍDA:</strong> <span id="saida-resultado"></span></div>
                                    <div id="diferenca-container" class="result-item diferenca" style="display: none;">
                                    </div>
                                    <div id="alerta-intervalo" class="result-item alerta" style="display: none;">
                                        <strong>ATENÇÃO:</strong> <span id="alerta-intervalo-texto"></span>
                                    </div>
                                    <div id="tempo-extra-container" class="result-item" style="display: none;">
                                        <strong>TEMPO EXTRA:</strong> <span id="tempo-extra-resultado"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </main>
    </div>

    <!-- Modal para Adicionar Funcionário -->
    <div class="modal fade" id="addEmployeeModal" tabindex="-1" aria-labelledby="addEmployeeModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addEmployeeModalLabel">Adicionar Funcionário</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="employeeForm">
                        <div class="mb-3">
                            <label for="employeeName" class="form-label required-field">Nome Completo</label>
                            <input type="text" class="form-control" id="employeeName" required>
                        </div>
                        <div class="mb-3">
                            <label for="employeeEmail" class="form-label required-field">Email</label>
                            <input type="email" class="form-control" id="employeeEmail" required>
                        </div>
                        <div class="mb-3">
                            <label for="employeePosition" class="form-label required-field">Cargo</label>
                            <input type="text" class="form-control" id="employeePosition" required>
                        </div>
                        <div class="mb-3">
                            <label for="employeeDepartment" class="form-label required-field">Departamento</label>
                            <select class="form-select" id="employeeDepartment" required>
                                <option value="">Selecione...</option>
                                <option value="Administrativo"> Administrativo </option>
                                <option value="Almoxarifado"> Almoxarifado </option>
                                <option value="Controladoria"> Controladoria </option>
                                <option value="Contabilidade"> Contabilidade </option> 
                                <option value="Comercial"> Comercial </option>
                                <option value="Camarim"> Camarim </option> 
                                <option value="Cabine OFF"> Cabine OFF </option>
                                <option value="Compras"> Compras </option>
                                <option value="Diretoria"> Diretoria </option>
                                <option value="Financeiro">Financeiro</option>
                                <option value="Jornalismo"> Jornalismo </option>
                                <option value="Marketing">Marketing</option>
                                <option value="Master"> Master </option>                                
                                <option value="OPEC"> OPEC </option>
                                <option value="Operações">Operações</option>
                                <option value="RH">RH</option>
                                <option value="Recepção"> Recepção </option>
                                <option value="Switcher"> Switcher </option>                                                                                                                                                                 
                                <option value="TI">TI</option>
                                <option value="Técnica"> Técnica </option>
                                <option value="Transporte"> Transporte </option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="employeeStatus" class="form-label required-field">Status</label>
                            <select class="form-select" id="employeeStatus" required>
                                <option value="Ativo">Ativo</option>
                                <option value="Inativo">Inativo</option>
                                <option value="Férias">Férias</option>
                                <option value="Licença">Licença</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="saveEmployee">Salvar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para Adicionar Ramal -->
    <div class="modal fade" id="addExtensionModal" tabindex="-1" aria-labelledby="addExtensionModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addExtensionModalLabel">Adicionar Ramal</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="extensionForm">
                        <div class="mb-3">
                            <label for="extensionNumber" class="form-label required-field">Número do Ramal</label>
                            <input type="text" class="form-control" id="extensionNumber" required>
                        </div>
                        <div class="mb-3">
                            <label for="extensionEmployee" class="form-label required-field">Funcionário</label>
                            <select class="form-select" id="extensionEmployee" required>
                                <option value="">Selecione...</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="extensionLocation" class="form-label">Localização</label>
                            <input type="text" class="form-control" id="extensionLocation">
                        </div>
                        <div class="mb-3">
                            <label for="extensionStatus" class="form-label required-field">Status</label>
                            <select class="form-select" id="extensionStatus" required>
                                <option value="Ativo">Ativo</option>
                                <option value="Inativo">Inativo</option>
                                <option value="Manutenção">Manutenção</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="saveExtension">Salvar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para Adicionar Ativo -->
    <div class="modal fade" id="addAssetModal" tabindex="-1" aria-labelledby="addAssetModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAssetModalLabel">Adicionar Ativo</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="assetForm">
                        <div class="mb-3">
                            <label for="assetName" class="form-label required-field">Nome do Ativo</label>
                            <input type="text" class="form-control" id="assetName" required>
                        </div>
                        <div class="mb-3">
                            <label for="assetType" class="form-label required-field">Tipo</label>
                            <select class="form-select" id="assetType" required>
                                <option value="">Selecione...</option>
                                <option value="Notebook">Notebook</option>
                                <option value="Desktop">Desktop</option>
                                <option value="Monitor">Monitor</option>
                                <option value="Telefone">Telefone</option>
                                <option value="Tablet">Tablet</option>
                                <option value="Smartphone">Smartphone</option>
                                <option value="Outro">Outro</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="assetModel" class="form-label required-field">Modelo</label>
                            <input type="text" class="form-control" id="assetModel" required>
                        </div>
                        <div class="mb-3 conditional-field" id="assetInchesField">
                            <label for="assetInches" class="form-label">Polegadas</label>
                            <input type="number" class="form-control" id="assetInches" min="10" max="100">
                        </div>
                        <div class="mb-3">
                            <label for="assetDescription" class="form-label">Descrição</label>
                            <textarea class="form-control" id="assetDescription" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="assetSerial" class="form-label">Número de Série</label>
                            <input type="text" class="form-control" id="assetSerial">
                        </div>
                        <div class="mb-3">
                            <label for="assetEmployee" class="form-label">Responsável</label>
                            <select class="form-select" id="assetEmployee">
                                <option value="">Sem funcionário atribuído</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="assetAcquisition" class="form-label">Data de Aquisição</label>
                            <input type="date" class="form-control" id="assetAcquisition">
                        </div>
                        <div class="mb-3">
                            <label for="assetStatus" class="form-label required-field">Status</label>
                            <select class="form-select" id="assetStatus" required>
                                <option value="Ativo">Ativo</option>
                                <option value="Inativo">Inativo</option>
                                <option value="Manutenção">Manutenção</option>
                                <option value="Reserva">Reserva</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="saveAsset">Salvar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para Adicionar Férias -->
    <div class="modal fade" id="addVacationModal" tabindex="-1" aria-labelledby="addVacationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addVacationModalLabel">Solicitar Férias</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="vacationForm">
                        <div class="mb-3">
                            <label for="vacationEmployee" class="form-label required-field">Funcionário</label>
                            <select class="form-select" id="vacationEmployee" required>
                                <option value="">Selecione...</option>
                            </select>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="vacationStart" class="form-label required-field">Início</label>
                                <input type="date" class="form-control" id="vacationStart" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="vacationEnd" class="form-label required-field">Término</label>
                                <input type="date" class="form-control" id="vacationEnd" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="vacationStatus" class="form-label required-field">Status</label>
                            <select class="form-select" id="vacationStatus" required>
                                <option value="Em Andamento" selected>Em Andamento</option>
                                <option value="Cancelado">Cancelado</option>
                                <option value="Concluído">Concluído</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="saveVacation">Salvar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para Adicionar Projeto -->
    <div class="modal fade" id="addProjectModal" tabindex="-1" aria-labelledby="addProjectModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addProjectModalLabel">Adicionar Projeto</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="projectForm">
                        <div class="mb-3">
                            <label for="projectName" class="form-label required-field">Nome do Projeto</label>
                            <input type="text" class="form-control" id="projectName" required>
                        </div>
                        <div class="mb-3">
                            <label for="projectDescription" class="form-label">Descrição</label>
                            <textarea class="form-control" id="projectDescription" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="projectResponsible" class="form-label required-field">Responsável</label>
                            <select class="form-select" id="projectResponsible" required>
                                <option value="">Selecione...</option>
                            </select>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="projectStart" class="form-label required-field">Data de Início</label>
                                <input type="date" class="form-control" id="projectStart" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="projectDeadline" class="form-label required-field">Prazo</label>
                                <input type="date" class="form-control" id="projectDeadline" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="projectPriority" class="form-label required-field">Prioridade</label>
                            <select class="form-select" id="projectPriority" required>
                                <option value="Baixa">Baixa</option>
                                <option value="Média" selected>Média</option>
                                <option value="Alta">Alta</option>
                                <option value="Urgente">Urgente</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="projectProgress" class="form-label">Progresso (%)</label>
                            <input type="range" class="form-range" id="projectProgress" min="0" max="100" value="0">
                            <div class="d-flex justify-content-between">
                                <span>0%</span>
                                <span id="projectProgressValue">0%</span>
                                <span>100%</span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="projectStatus" class="form-label required-field">Status</label>
                            <select class="form-select" id="projectStatus" required>
                                <option value="Planejamento">Planejamento</option>
                                <option value="Em Andamento" selected>Em Andamento</option>
                                <option value="Pausado">Pausado</option>
                                <option value="Concluído">Concluído</option>
                                <option value="Cancelado">Cancelado</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="saveProject">Salvar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para Visualização de QR Code -->
    <div class="modal fade qr-code-modal" id="viewQRCodeModal" tabindex="-1" aria-labelledby="viewQRCodeModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewQRCodeModalLabel">QR Code do Ativo</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="qr-code-preview" id="qrCodePreview">
                        <!-- QR Code será gerado aqui -->
                    </div>
                    <div class="qr-code-info">
                        <h6>Informações do Ativo</h6>
                        <div id="qrAssetInfo">
                            <!-- Informações do ativo serão preenchidas aqui -->
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                    <button type="button" class="btn btn-primary" id="downloadQRCodeBtn">
                        <i class="fas fa-download"></i> Baixar QR Code
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Alerta de Retorno de Férias -->
    <div class="modal fade" id="vacationReturnModal" tabindex="-1" aria-labelledby="vacationReturnModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="vacationReturnModalLabel">Retorno de Férias</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="vacationReturnAlerts">
                        <!-- Alertas serão inseridos aqui -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="understandButton">Entendi</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Alerta POP para Reativação de Colaborador -->
    <div class="modal fade" id="reactivationAlertModal" tabindex="-1" aria-labelledby="reactivationAlertModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reactivationAlertModalLabel">Reativação de Colaborador</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <span id="reactivationAlertMessage"></span>
                    </div>
                    <p>Por favor, confirme que realizou a reativação do colaborador no sistema.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="confirmReactivation">Confirmar Reativação</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        // Configuração do Supabase
        const supabaseUrl = 'https://nwiumhmlervhgoaqqjil.supabase.co';
        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im53aXVtaG1sZXJ2aGdvYXFxamlsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE2NTk5MjgsImV4cCI6MjA2NzIzNTkyOH0.v_2Ti2XddOyjxq0G1VLMWeCcrCInfCHuD921kBr4kmA';
        
        // Inicializar Supabase
        const supabase = window.supabase.createClient(supabaseUrl, supabaseKey);

        // Estado da aplicação
        const appState = {
            currentSection: 'dashboard',
            employees: [],
            extensions: [],
            assets: [],
            vacations: [],
            projects: [],
            currentEditingId: null,
            charts: {},
            syncInterval: null,
            isSyncing: false,
            lastSync: null,
            // Controle de alertas de reativação
            reactivationAlerts: JSON.parse(localStorage.getItem('reactivationAlerts')) || [],
            // Controle de seleção de ativos para QR Codes
            selectedAssets: new Set(),
            // Controle do QR Code atual
            currentQRCode: null
        };

        // Inicialização da aplicação
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        async function initializeApp() {
            try {
                console.log('Inicializando aplicação...');
                
                // Inicializar componentes básicos primeiro
                initializeNavigation();
                initializeRealTimeClock();
                
                // Configurar event listeners básicos
                setupBasicEventListeners();
                
                // Tentar carregar dados do Supabase
                await loadAllData();
                
                // Inicializar componentes que dependem dos dados
                initializeModals();
                populateEmployeeDropdowns();
                
                // Inicializar gráficos
                initializeCharts();
                
                // Configurar eventos restantes
                setupEventListeners();
                
                // Iniciar sincronização automática
                startAutoSync();
                
                // Mostrar alertas de férias
                checkVacationAlerts();
                
                // Inicializar funcionalidades do ponto
                initializePonto();
                
                // Inicializar funcionalidades de seleção de ativos
                initializeAssetSelection();

                console.log('Aplicação inicializada com sucesso!');
                showAlert('Sistema carregado com sucesso!', 'success', 3000);
                
            } catch (error) {
                console.error('Erro na inicialização:', error);
                showAlert('Erro ao carregar o sistema. Verifique o console para mais detalhes.', 'error');
                
                // Carregar dados de exemplo em caso de erro
                loadSampleData();
            }
        }

        // Carregar dados de exemplo em caso de falha
        function loadSampleData() {
            console.log('Carregando dados de exemplo...');
            
            // Dados de exemplo para demonstração
            appState.employees = [
                { id: 1, name: 'João Silva', email: 'joao@empresa.com', position: 'Desenvolvedor', department: 'TI', status: 'Ativo' },
                { id: 2, name: 'Maria Santos', email: 'maria@empresa.com', position: 'Analista', department: 'RH', status: 'Ativo' }
            ];
            
            appState.assets = [
                { id: 1, name: 'Notebook Dell', type: 'Notebook', model: 'Latitude 5400', status: 'Ativo' },
                { id: 2, name: 'Monitor Samsung', type: 'Monitor', model: 'S24F350', inches: 24, status: 'Ativo' }
            ];
            
            // Atualizar interfaces
            updateEmployeesTable();
            updateAssetsTable();
            updateDashboardStats();
            populateEmployeeDropdowns();
            
            showAlert('Dados de demonstração carregados. O sistema está funcionando offline.', 'warning', 5000);
        }

        // Sincronização automática
        function startAutoSync() {
            // Sincronizar a cada 60 segundos
            appState.syncInterval = setInterval(async () => {
                await syncData();
            }, 60000);
        }

        async function syncData() {
            if (appState.isSyncing) return;
            
            appState.isSyncing = true;
            updateSyncStatus('Sincronizando...', 'syncing');
            
            try {
                await loadAllData();
                appState.lastSync = new Date();
                updateSyncStatus('Sincronizado', 'success');
            } catch (error) {
                console.error('Erro na sincronização:', error);
                updateSyncStatus('Erro na sincronização', 'error');
            } finally {
                appState.isSyncing = false;
            }
        }

        function updateSyncStatus(text, status) {
            const syncIndicator = document.getElementById('syncIndicator');
            const syncText = document.getElementById('syncText');
            
            if (syncText) syncText.textContent = text;
            if (syncIndicator) {
                syncIndicator.className = 'sync-indicator';
                
                if (status === 'syncing') {
                    syncIndicator.classList.add('syncing');
                } else if (status === 'error') {
                    syncIndicator.classList.add('error');
                }
            }
        }

        // Navegação
        function initializeNavigation() {
            const sidebarLinks = document.querySelectorAll('.sidebar-menu a');
            const toggleSidebarBtn = document.getElementById('toggleSidebar');
            
            // Alternar sidebar
            if (toggleSidebarBtn) {
                toggleSidebarBtn.addEventListener('click', function() {
                    const sidebar = document.getElementById('sidebar');
                    const mainContent = document.getElementById('mainContent');
                    if (sidebar && mainContent) {
                        sidebar.classList.toggle('collapsed');
                        mainContent.classList.toggle('expanded');
                    }
                });
            }
            
            // Navegação entre seções
            sidebarLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Remover classe active de todos os links
                    sidebarLinks.forEach(l => l.classList.remove('active'));
                    
                    // Adicionar classe active ao link clicado
                    this.classList.add('active');
                    
                    // Obter a seção alvo
                    const targetSection = this.getAttribute('data-section');
                    
                    // Atualizar título da página
                    updatePageTitle(this.querySelector('span').textContent);
                    
                    // Mostrar a seção correspondente
                    showSection(targetSection);
                });
            });
            
            // Navegação das abas do dashboard
            const dashboardTabs = document.querySelectorAll('.dashboard-tab');
            if (dashboardTabs.length > 0) {
                dashboardTabs.forEach(tab => {
                    tab.addEventListener('click', function() {
                        const tabId = this.getAttribute('data-tab');
                        
                        // Remover classe active de todas as abas
                        dashboardTabs.forEach(t => t.classList.remove('active'));
                        
                        // Adicionar classe active à aba clicada
                        this.classList.add('active');
                        
                        // Mostrar o conteúdo correspondente
                        showDashboardTab(tabId);
                    });
                });
            }
        }

        function showSection(sectionId) {
            // Esconder todas as seções
            const sections = document.querySelectorAll('.section');
            sections.forEach(section => section.classList.remove('active'));
            
            // Mostrar a seção selecionada
            const targetSection = document.getElementById(sectionId + 'Section');
            if (targetSection) {
                targetSection.classList.add('active');
                appState.currentSection = sectionId;
                
                // Carregar dados específicos da seção se necessário
                if (sectionId === 'dashboard') {
                    updateDashboardStats();
                    updateCharts();
                }
            }
        }

        function showDashboardTab(tabId) {
            // Esconder todos os conteúdos de abas
            const tabContents = document.querySelectorAll('.dashboard-tab-content');
            tabContents.forEach(content => content.classList.remove('active'));
            
            // Mostrar o conteúdo da aba selecionada
            const targetContent = document.getElementById(tabId + 'Tab');
            if (targetContent) {
                targetContent.classList.add('active');
            }
        }

        function updatePageTitle(title) {
            const pageTitle = document.getElementById('pageTitle');
            if (pageTitle) pageTitle.textContent = title;
        }

        // Relógio em tempo real
        function initializeRealTimeClock() {
            function updateClock() {
                const now = new Date();
                const timeStr = now.toLocaleTimeString('pt-BR');
                const headerClock = document.getElementById('headerClock');
                if (headerClock) headerClock.textContent = timeStr;
            }
            
            updateClock();
            setInterval(updateClock, 1000);
        }

        // Sistema de Alertas
        function showAlert(message, type = 'info', duration = 5000) {
            const alertContainer = document.getElementById('alertContainer');
            if (!alertContainer) return;
            
            const alertId = 'alert-' + Date.now();
            
            const alertTypes = {
                'success': { icon: 'fas fa-check-circle', class: 'alert-success' },
                'error': { icon: 'fas fa-exclamation-circle', class: 'alert-error' },
                'warning': { icon: 'fas fa-exclamation-triangle', class: 'alert-warning' },
                'info': { icon: 'fas fa-info-circle', class: 'alert-info' }
            };
            
            const alertConfig = alertTypes[type] || alertTypes.info;
            
            const alertHTML = `
                <div id="${alertId}" class="alert ${alertConfig.class}">
                    <i class="alert-icon ${alertConfig.icon}"></i>
                    <div class="alert-content">${message}</div>
                    <button class="alert-close" onclick="closeAlert('${alertId}')">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            
            alertContainer.insertAdjacentHTML('beforeend', alertHTML);
            
            if (duration > 0) {
                setTimeout(() => {
                    closeAlert(alertId);
                }, duration);
            }
            
            return alertId;
        }

        function closeAlert(alertId) {
            const alert = document.getElementById(alertId);
            if (alert) {
                alert.style.animation = 'slideInRight 0.3s ease reverse';
                setTimeout(() => {
                    alert.remove();
                }, 300);
            }
        }

        // Carregamento de dados do Supabase
        async function loadAllData() {
            try {
                console.log('Carregando dados do Supabase...');
                
                // Carregar funcionários
                const { data: employees, error: employeesError } = await supabase
                    .from('employees')
                    .select('*')
                    .order('name');
                
                if (employeesError) throw employeesError;
                appState.employees = employees || [];
                
                // Carregar ramais
                const { data: extensions, error: extensionsError } = await supabase
                    .from('extensions')
                    .select('*')
                    .order('number');
                
                if (extensionsError) throw extensionsError;
                appState.extensions = extensions || [];
                
                // Carregar ativos
                const { data: assets, error: assetsError } = await supabase
                    .from('assets')
                    .select('*')
                    .order('type');
                
                if (assetsError) throw assetsError;
                appState.assets = assets || [];
                
                // Carregar férias
                const { data: vacations, error: vacationsError } = await supabase
                    .from('vacations')
                    .select('*')
                    .order('start_date', { ascending: false });
                
                if (vacationsError) throw vacationsError;
                appState.vacations = vacations || [];
                
                // Carregar projetos
                const { data: projects, error: projectsError } = await supabase
                    .from('projects')
                    .select('*')
                    .order('deadline');
                
                if (projectsError) throw projectsError;
                appState.projects = projects || [];
                
                console.log('Dados carregados com sucesso:', {
                    employees: appState.employees.length,
                    extensions: appState.extensions.length,
                    assets: appState.assets.length,
                    vacations: appState.vacations.length,
                    projects: appState.projects.length
                });
                
                // Atualizar interfaces
                updateEmployeesTable();
                updateExtensionsTable();
                updateAssetsTable();
                updateVacationsTable();
                updateProjectsTable();
                updateDashboardStats();
                
            } catch (error) {
                console.error('Erro ao carregar dados:', error);
                throw error;
            }
        }

        // Atualizar tabelas
        function updateEmployeesTable() {
            const tbody = document.getElementById('employeesTableBody');
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            if (appState.employees.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7" class="text-center">Nenhum funcionário cadastrado</td></tr>';
                return;
            }
            
            appState.employees.forEach(employee => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>#EMP-${employee.id.toString().padStart(3, '0')}</td>
                    <td>${employee.name}</td>
                    <td>${employee.email}</td>
                    <td>${employee.position}</td>
                    <td>${employee.department}</td>
                    <td><span class="status-badge status-${getStatusClass(employee.status)}">${employee.status}</span></td>
                    <td class="action-buttons">
                        <button class="btn btn-sm btn-outline-primary" onclick="editEmployee(${employee.id})">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteEmployee(${employee.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function updateExtensionsTable() {
            const tbody = document.getElementById('extensionsTableBody');
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            if (appState.extensions.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7" class="text-center">Nenhum ramal cadastrado</td></tr>';
                return;
            }
            
            appState.extensions.forEach(extension => {
                const employee = appState.employees.find(emp => emp.id === extension.employee_id);
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>#EXT-${extension.id.toString().padStart(3, '0')}</td>
                    <td>${extension.number}</td>
                    <td>${employee ? employee.name : 'N/A'}</td>
                    <td>${employee ? employee.department : 'N/A'}</td>
                    <td>${extension.location || 'N/A'}</td>
                    <td><span class="status-badge status-${getStatusClass(extension.status)}">${extension.status}</span></td>
                    <td class="action-buttons">
                        <button class="btn btn-sm btn-outline-primary" onclick="editExtension(${extension.id})">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteExtension(${extension.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function updateAssetsTable() {
            const tbody = document.getElementById('assetsTableBody');
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            if (appState.assets.length === 0) {
                tbody.innerHTML = '<tr><td colspan="12" class="text-center">Nenhum ativo cadastrado</td></tr>';
                return;
            }
            
            appState.assets.forEach(asset => {
                const employee = appState.employees.find(emp => emp.id === asset.employee_id);
                const isSelected = appState.selectedAssets.has(asset.id);
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <input type="checkbox" class="form-check-input asset-checkbox" data-asset-id="${asset.id}" ${isSelected ? 'checked' : ''}>
                    </td>
                    <td>#AST-${asset.id.toString().padStart(3, '0')}</td>
                    <td>${asset.name}</td>
                    <td>${asset.type}</td>
                    <td>${asset.model || 'N/A'}</td>
                    <td>${asset.inches ? asset.inches + '"' : 'N/A'}</td>
                    <td>${asset.description || 'N/A'}</td>
                    <td>${asset.serial_number || 'N/A'}</td>
                    <td>${employee ? employee.name : 'Sem atribuição'}</td>
                    <td><span class="status-badge status-${getStatusClass(asset.status)}">${asset.status}</span></td>
                    <td>
                        ${asset.id ? `
                            <button class="btn btn-sm btn-outline-info" onclick="generateQRCode(${asset.id})" title="Gerar QR Code">
                                <i class="fas fa-qrcode"></i> QR
                            </button>
                        ` : 'N/A'}
                    </td>
                    <td class="action-buttons">
                        <button class="btn btn-sm btn-outline-primary" onclick="editAsset(${asset.id})">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteAsset(${asset.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
            
            // Atualizar contador de seleção
            updateSelectedCount();
        }

        function updateVacationsTable() {
            const tbody = document.getElementById('vacationsTableBody');
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            if (appState.vacations.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-center">Nenhuma solicitação de férias</td></tr>';
                return;
            }
            
            appState.vacations.forEach(vacation => {
                const employee = appState.employees.find(emp => emp.id === vacation.employee_id);
                
                // Calcular progresso progressivo
                const startDate = new Date(vacation.start_date);
                const endDate = new Date(vacation.end_date);
                const today = new Date();
                
                let progress = 0;
                let daysUntilReturn = 0;
                
                if (today < startDate) {
                    // Férias ainda não começaram
                    progress = 0;
                    daysUntilReturn = Math.ceil((endDate - today) / (1000 * 60 * 60 * 24)) + 1;
                } else if (today > endDate) {
                    // Férias já terminaram
                    progress = 100;
                    daysUntilReturn = 0;
                } else {
                    // Férias em andamento
                    const totalDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
                    const daysPassed = Math.ceil((today - startDate) / (1000 * 60 * 60 * 24)) + 1;
                    progress = Math.min(100, Math.max(0, (daysPassed / totalDays) * 100));
                    daysUntilReturn = Math.ceil((endDate - today) / (1000 * 60 * 60 * 24));
                }
                
                // Ajuste: quando faltar 1 dia para o retorno, progresso = 100%
                if (daysUntilReturn === 1) {
                    progress = 100;
                }
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>#VAC-${vacation.id.toString().padStart(3, '0')}</td>
                    <td>${employee ? employee.name : 'N/A'}</td>
                    <td>
                        <div class="vacation-progress-container">
                            <div class="vacation-progress-label">
                                <span>${daysUntilReturn} dias para retorno</span>
                                <span>${Math.round(progress)}%</span>
                            </div>
                            <div class="vacation-progress">
                                <div class="vacation-progress-bar" role="progressbar" style="width: ${progress}%" 
                                    aria-valuenow="${progress}" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        </div>
                    </td>
                    <td>${vacation.days}</td>
                    <td><span class="status-badge status-${getStatusClass(vacation.status)}">${vacation.status}</span></td>
                    <td class="action-buttons">
                        <button class="btn btn-sm btn-outline-primary" onclick="editVacation(${vacation.id})">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteVacation(${vacation.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function updateProjectsTable() {
            const tbody = document.getElementById('projectsTableBody');
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            if (appState.projects.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7" class="text-center">Nenhum projeto cadastrado</td></tr>';
                return;
            }
            
            appState.projects.forEach(project => {
                const manager = appState.employees.find(emp => emp.id === project.manager_id);
                const priorityClass = getPriorityClass(project.priority);
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>#PRJ-${project.id.toString().padStart(3, '0')}</td>
                    <td>${project.name}</td>
                    <td>${manager ? manager.name : 'N/A'}</td>
                    <td><span class="priority-badge ${priorityClass}">${project.priority}</span></td>
                    <td>
                        <div class="progress-container">
                            <div class="progress-label">
                                <span>Progresso</span>
                                <span>${project.progress || 0}%</span>
                            </div>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar" style="width: ${project.progress || 0}%" 
                                    aria-valuenow="${project.progress || 0}" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        </div>
                    </td>
                    <td><span class="status-badge status-${getStatusClass(project.status)}">${project.status}</span></td>
                    <td class="action-buttons">
                        <button class="btn btn-sm btn-outline-primary" onclick="editProject(${project.id})">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteProject(${project.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Utilitários
        function getStatusClass(status) {
            const statusMap = {
                'Ativo': 'active',
                'Inativo': 'inactive',
                'Férias': 'vacation',
                'Licença': 'pending',
                'Solicitado': 'pending',
                'Aprovado': 'approved',
                'Cancelado': 'cancelled',
                'Em Andamento': 'in-progress',
                'Concluído': 'completed',
                'Manutenção': 'maintenance',
                'Reserva': 'reserve',
                'Planejamento': 'pending',
                'Pausado': 'pending'
            };
            return statusMap[status] || 'pending';
        }

        function getPriorityClass(priority) {
            const priorityMap = {
                'Baixa': 'priority-low',
                'Média': 'priority-medium',
                'Alta': 'priority-high',
                'Urgente': 'priority-urgent'
            };
            return priorityMap[priority] || 'priority-medium';
        }

        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            
            const date = new Date(dateString);
            
            const day = date.getDate().toString().padStart(2, '0');
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const year = date.getFullYear();
            
            return `${day}/${month}/${year}`;
        }

        function formatDateForInput(dateString) {
            if (!dateString) return '';
            
            const date = new Date(dateString);
            
            const year = date.getFullYear();
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const day = date.getDate().toString().padStart(2, '0');
            
            return `${year}-${month}-${day}`;
        }

        // Formatar nome com iniciais maiúsculas
        function formatName(name) {
            if (!name) return '';
            return name.toLowerCase()
                .split(' ')
                .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                .join(' ');
        }

        // População de dropdowns
        function populateEmployeeDropdowns() {
            const dropdowns = [
                'extensionEmployee',
                'assetEmployee',
                'vacationEmployee',
                'projectResponsible'
            ];
            
            dropdowns.forEach(dropdownId => {
                const dropdown = document.getElementById(dropdownId);
                if (dropdown) {
                    // Limpar opções existentes (exceto a primeira)
                    while (dropdown.children.length > 1) {
                        dropdown.removeChild(dropdown.lastChild);
                    }
                    
                    // Adicionar funcionários ativos
                    appState.employees
                        .filter(emp => emp.status === 'Ativo')
                        .forEach(employee => {
                            const option = document.createElement('option');
                            option.value = employee.id;
                            option.textContent = employee.name;
                            dropdown.appendChild(option);
                        });
                }
            });
        }

        // Atualizar estatísticas do dashboard
        function updateDashboardStats() {
            // Total de funcionários
            const totalEmployees = document.getElementById('totalEmployees');
            if (totalEmployees) totalEmployees.textContent = appState.employees.length;
            
            // Total de ativos
            const totalAssets = document.getElementById('totalAssets');
            if (totalAssets) totalAssets.textContent = appState.assets.length;
            
            // Férias ativas
            const activeVacations = appState.vacations.filter(v => v.status === 'Em Andamento').length;
            const onVacation = document.getElementById('onVacation');
            if (onVacation) onVacation.textContent = activeVacations;
            
            // Tarefas pendentes (projetos em andamento + férias solicitadas)
            const pendingProjects = appState.projects.filter(p => p.status === 'Planejamento' || p.status === 'Em Andamento').length;
            const pendingVacations = appState.vacations.filter(v => v.status === 'Solicitado').length;
            const pendingTasks = document.getElementById('pendingTasks');
            if (pendingTasks) pendingTasks.textContent = pendingProjects + pendingVacations;
        }

        // Gráficos
        function initializeCharts() {
            console.log('Inicializando gráficos...');
            
            // Gráfico de visão geral - formato rosca
            const overviewCtx = document.getElementById('overviewChart');
            if (overviewCtx) {
                try {
                    appState.charts.overview = new Chart(overviewCtx.getContext('2d'), {
                        type: 'doughnut',
                        data: {
                            labels: ['Funcionários', 'Ativos', 'Férias Ativas', 'Ramais'],
                            datasets: [{
                                data: [
                                    appState.employees.length,
                                    appState.assets.length,
                                    appState.vacations.filter(v => v.status === 'Em Andamento').length,
                                    appState.extensions.length
                                ],
                                backgroundColor: [
                                    'rgba(67, 97, 238, 0.7)',
                                    'rgba(76, 201, 240, 0.7)',
                                    'rgba(246, 194, 62, 0.7)',
                                    'rgba(58, 12, 163, 0.7)'
                                ],
                                borderColor: [
                                    'rgba(67, 97, 238, 1)',
                                    'rgba(76, 201, 240, 1)',
                                    'rgba(246, 194, 62, 1)',
                                    'rgba(58, 12, 163, 1)'
                                ],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        padding: 20,
                                        usePointStyle: true
                                    }
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            return `${context.label}: ${context.raw}`;
                                        }
                                    }
                                }
                            },
                            cutout: '60%'
                        }
                    });
                } catch (error) {
                    console.error('Erro ao criar gráfico de visão geral:', error);
                }
            }
            
            // Gráfico mesclado de status dos ativos
            updateAtivosChart();

            // Gráfico doughnut para funcionários por departamento
            const employeeDoughnutCtx = document.getElementById('employeeDoughnutChart');
            if (employeeDoughnutCtx) {
                try {
                    // Obter todos os departamentos únicos
                    const departments = [...new Set(appState.employees.map(emp => emp.department))];
                    const departmentCounts = departments.map(dept => 
                        appState.employees.filter(emp => emp.department === dept).length
                    );
                    
                    appState.charts.employeeDoughnut = new Chart(employeeDoughnutCtx.getContext('2d'), {
                        type: 'doughnut',
                        data: {
                            labels: departments,
                            datasets: [{
                                data: departmentCounts,
                                backgroundColor: [
                                    'rgba(67, 97, 238, 0.7)',
                                    'rgba(76, 201, 240, 0.7)',
                                    'rgba(246, 194, 62, 0.7)',
                                    'rgba(58, 12, 163, 0.7)',
                                    'rgba(231, 74, 59, 0.7)',
                                    'rgba(25, 135, 84, 0.7)',
                                    'rgba(108, 117, 125, 0.7)',
                                    'rgba(13, 110, 253, 0.7)',
                                    'rgba(111, 66, 193, 0.7)',
                                    'rgba(214, 51, 132, 0.7)'
                                ],
                                borderColor: [
                                    'rgba(67, 97, 238, 1)',
                                    'rgba(76, 201, 240, 1)',
                                    'rgba(246, 194, 62, 1)',
                                    'rgba(58, 12, 163, 1)',
                                    'rgba(231, 74, 59, 1)',
                                    'rgba(25, 135, 84, 1)',
                                    'rgba(108, 117, 125, 1)',
                                    'rgba(13, 110, 253, 1)',
                                    'rgba(111, 66, 193, 1)',
                                    'rgba(214, 51, 132, 1)'
                                ],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        padding: 20,
                                        usePointStyle: true
                                    }
                                }
                            },
                            cutout: '60%'
                        }
                    });
                } catch (error) {
                    console.error('Erro ao criar gráfico de doughnut de funcionários:', error);
                }
            }

            // Gráfico pie para ativos por tipo
            const ativosPieCtx = document.getElementById('ativosPieChart');
            if (ativosPieCtx) {
                try {
                    // Contar ativos por tipo
                    const assetTypes = [...new Set(appState.assets.map(asset => asset.type))];
                    const assetCounts = assetTypes.map(type => 
                        appState.assets.filter(asset => asset.type === type).length
                    );
                    
                    appState.charts.ativosPie = new Chart(ativosPieCtx.getContext('2d'), {
                        type: 'pie',
                        data: {
                            labels: assetTypes,
                            datasets: [{
                                data: assetCounts,
                                backgroundColor: [
                                    'rgba(67, 97, 238, 0.7)',
                                    'rgba(76, 201, 240, 0.7)',
                                    'rgba(246, 194, 62, 0.7)',
                                    'rgba(58, 12, 163, 0.7)',
                                    'rgba(231, 74, 59, 0.7)',
                                    'rgba(25, 135, 84, 0.7)',
                                    'rgba(108, 117, 125, 0.7)',
                                    'rgba(13, 110, 253, 0.7)',
                                    'rgba(111, 66, 193, 0.7)',
                                    'rgba(214, 51, 132, 0.7)'
                                ],
                                borderColor: [
                                    'rgba(67, 97, 238, 1)',
                                    'rgba(76, 201, 240, 1)',
                                    'rgba(246, 194, 62, 1)',
                                    'rgba(58, 12, 163, 1)',
                                    'rgba(231, 74, 59, 1)',
                                    'rgba(25, 135, 84, 1)',
                                    'rgba(108, 117, 125, 1)',
                                    'rgba(13, 110, 253, 1)',
                                    'rgba(111, 66, 193, 1)',
                                    'rgba(214, 51, 132, 1)'
                                ],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        padding: 20,
                                        usePointStyle: true
                                    }
                                }
                            }
                        }
                    });
                } catch (error) {
                    console.error('Erro ao criar gráfico de pie de ativos:', error);
                }
            }

            // Gráfico radar para férias
            const vacationRadarCtx = document.getElementById('vacationRadarChart');
            if (vacationRadarCtx) {
                try {
                    appState.charts.vacationRadar = new Chart(vacationRadarCtx.getContext('2d'), {
                        type: 'radar',
                        data: {
                            labels: ['Solicitado', 'Aprovado', 'Em Andamento', 'Concluído', 'Cancelado'],
                            datasets: [
                                {
                                    label: 'Solicitações de Férias',
                                    data: [
                                        appState.vacations.filter(v => v.status === 'Solicitado').length,
                                        appState.vacations.filter(v => v.status === 'Aprovado').length,
                                        appState.vacations.filter(v => v.status === 'Em Andamento').length,
                                        appState.vacations.filter(v => v.status === 'Concluído').length,
                                        appState.vacations.filter(v => v.status === 'Cancelado').length
                                    ],
                                    backgroundColor: 'rgba(246, 194, 62, 0.2)',
                                    borderColor: '#f6c23e',
                                    borderWidth: 2,
                                    pointBackgroundColor: '#f6c23e'
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                r: {
                                    angleLines: {
                                        display: true
                                    },
                                    suggestedMin: 0,
                                    suggestedMax: Math.max(...[
                                        appState.vacations.filter(v => v.status === 'Solicitado').length,
                                        appState.vacations.filter(v => v.status === 'Aprovado').length,
                                        appState.vacations.filter(v => v.status === 'Em Andamento').length,
                                        appState.vacations.filter(v => v.status === 'Concluído').length,
                                        appState.vacations.filter(v => v.status === 'Cancelado').length
                                    ]) + 1
                                }
                            }
                        }
                    });
                } catch (error) {
                    console.error('Erro ao criar gráfico de radar de férias:', error);
                }
            }

            // Gráfico de férias por mês
            const vacationMonthCtx = document.getElementById('vacationMonthChart');
            if (vacationMonthCtx) {
                try {
                    // Preparar dados por mês
                    const months = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'];
                    const vacationsByMonth = new Array(12).fill(0);
                    
                    appState.vacations.forEach(vacation => {
                        if (vacation.start_date) {
                            const date = new Date(vacation.start_date);
                            const month = date.getMonth();
                            vacationsByMonth[month]++;
                        }
                    });
                    
                    appState.charts.vacationMonth = new Chart(vacationMonthCtx.getContext('2d'), {
                        type: 'line',
                        data: {
                            labels: months,
                            datasets: [
                                {
                                    label: 'Férias por Mês',
                                    data: vacationsByMonth,
                                    borderColor: '#4cc9f0',
                                    backgroundColor: 'rgba(76, 201, 240, 0.1)',
                                    tension: 0.3,
                                    fill: true
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        stepSize: 1
                                    }
                                }
                            }
                        }
                    });
                } catch (error) {
                    console.error('Erro ao criar gráfico de férias por mês:', error);
                }
            }

            // Gráfico de doughnut para status dos projetos
            const projectDoughnutCtx = document.getElementById('projectDoughnutChart');
            if (projectDoughnutCtx) {
                try {
                    const projectStatuses = ['Planejamento', 'Em Andamento', 'Pausado', 'Concluído', 'Cancelado'];
                    const projectCounts = projectStatuses.map(status => 
                        appState.projects.filter(project => project.status === status).length
                    );
                    
                    appState.charts.projectDoughnut = new Chart(projectDoughnutCtx.getContext('2d'), {
                        type: 'doughnut',
                        data: {
                            labels: projectStatuses,
                            datasets: [{
                                data: projectCounts,
                                backgroundColor: [
                                    'rgba(67, 97, 238, 0.7)',
                                    'rgba(76, 201, 240, 0.7)',
                                    'rgba(246, 194, 62, 0.7)',
                                    'rgba(25, 135, 84, 0.7)',
                                    'rgba(231, 74, 59, 0.7)'
                                ],
                                borderColor: [
                                    'rgba(67, 97, 238, 1)',
                                    'rgba(76, 201, 240, 1)',
                                    'rgba(246, 194, 62, 1)',
                                    'rgba(25, 135, 84, 1)',
                                    'rgba(231, 74, 59, 1)'
                                ],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        padding: 20,
                                        usePointStyle: true
                                    }
                                }
                            },
                            cutout: '60%'
                        }
                    });
                } catch (error) {
                    console.error('Erro ao criar gráfico de doughnut de projetos:', error);
                }
            }

            // Gráfico de gauge (velocímetro) para progresso de projetos
            initializeGaugeChart();
            initializeProjetosGaugeChart();
        }

        function updateAtivosChart() {
            const ativosMergedCtx = document.getElementById('ativosMergedChart');
            if (!ativosMergedCtx) return;
            
            try {
                // Contar ativos por status
                const statusCounts = {
                    'Ativo': appState.assets.filter(a => a.status === 'Ativo').length,
                    'Inativo': appState.assets.filter(a => a.status === 'Inativo').length,
                    'Manutenção': appState.assets.filter(a => a.status === 'Manutenção').length,
                    'Reserva': appState.assets.filter(a => a.status === 'Reserva').length
                };
                
                // Destruir gráfico existente se houver
                if (appState.charts.ativosMerged) {
                    appState.charts.ativosMerged.destroy();
                }
                
                appState.charts.ativosMerged = new Chart(ativosMergedCtx.getContext('2d'), {
                    type: 'doughnut',
                    data: {
                        labels: Object.keys(statusCounts),
                        datasets: [{
                            data: Object.values(statusCounts),
                            backgroundColor: [
                                'rgba(25, 135, 84, 0.7)',
                                'rgba(108, 117, 125, 0.7)',
                                'rgba(255, 193, 7, 0.7)',
                                'rgba(13, 110, 253, 0.7)'
                            ],
                            borderColor: [
                                'rgba(25, 135, 84, 1)',
                                'rgba(108, 117, 125, 1)',
                                'rgba(255, 193, 7, 1)',
                                'rgba(13, 110, 253, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true
                                }
                            }
                        },
                        cutout: '60%'
                    }
                });
            } catch (error) {
                console.error('Erro ao criar gráfico mesclado de ativos:', error);
            }
        }

        function updateCharts() {
            // Atualizar todos os gráficos com dados mais recentes
            if (appState.charts.overview) {
                appState.charts.overview.data.datasets[0].data = [
                    appState.employees.length,
                    appState.assets.length,
                    appState.vacations.filter(v => v.status === 'Em Andamento').length,
                    appState.extensions.length
                ];
                appState.charts.overview.update();
            }
            
            updateAtivosChart();
            
            // Atualizar outros gráficos conforme necessário
            if (appState.charts.employeeDoughnut) {
                const departments = [...new Set(appState.employees.map(emp => emp.department))];
                const departmentCounts = departments.map(dept => 
                    appState.employees.filter(emp => emp.department === dept).length
                );
                
                appState.charts.employeeDoughnut.data.labels = departments;
                appState.charts.employeeDoughnut.data.datasets[0].data = departmentCounts;
                appState.charts.employeeDoughnut.update();
            }
            
            if (appState.charts.ativosPie) {
                const assetTypes = [...new Set(appState.assets.map(asset => asset.type))];
                const assetCounts = assetTypes.map(type => 
                    appState.assets.filter(asset => asset.type === type).length
                );
                
                appState.charts.ativosPie.data.labels = assetTypes;
                appState.charts.ativosPie.data.datasets[0].data = assetCounts;
                appState.charts.ativosPie.update();
            }
            
            if (appState.charts.vacationRadar) {
                appState.charts.vacationRadar.data.datasets[0].data = [
                    appState.vacations.filter(v => v.status === 'Solicitado').length,
                    appState.vacations.filter(v => v.status === 'Aprovado').length,
                    appState.vacations.filter(v => v.status === 'Em Andamento').length,
                    appState.vacations.filter(v => v.status === 'Concluído').length,
                    appState.vacations.filter(v => v.status === 'Cancelado').length
                ];
                appState.charts.vacationRadar.update();
            }
            
            if (appState.charts.vacationMonth) {
                const months = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'];
                const vacationsByMonth = new Array(12).fill(0);
                
                appState.vacations.forEach(vacation => {
                    if (vacation.start_date) {
                        const date = new Date(vacation.start_date);
                        const month = date.getMonth();
                        vacationsByMonth[month]++;
                    }
                });
                
                appState.charts.vacationMonth.data.datasets[0].data = vacationsByMonth;
                appState.charts.vacationMonth.update();
            }
            
            if (appState.charts.projectDoughnut) {
                const projectStatuses = ['Planejamento', 'Em Andamento', 'Pausado', 'Concluído', 'Cancelado'];
                const projectCounts = projectStatuses.map(status => 
                    appState.projects.filter(project => project.status === status).length
                );
                
                appState.charts.projectDoughnut.data.datasets[0].data = projectCounts;
                appState.charts.projectDoughnut.update();
            }
            
            // Atualizar gráficos de gauge
            updateGaugeChart();
            updateProjetosGaugeChart();
        }

        function initializeGaugeChart() {
            const gaugeCtx = document.getElementById('gaugeChart');
            if (!gaugeCtx) return;
            
            try {
                const gaugeValue = document.getElementById('gaugeValue');
                if (gaugeValue) gaugeValue.textContent = '0%';
                
                // Simulação de dados para o gauge
                const progress = Math.floor(Math.random() * 100);
                
                // Criar gráfico de gauge simples
                const gaugeChart = new Chart(gaugeCtx.getContext('2d'), {
                    type: 'doughnut',
                    data: {
                        datasets: [{
                            data: [progress, 100 - progress],
                            backgroundColor: [
                                progress > 70 ? '#28a745' : progress > 40 ? '#ffc107' : '#dc3545',
                                '#e9ecef'
                            ],
                            borderWidth: 0,
                            circumference: 180,
                            rotation: 270
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '80%',
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                enabled: false
                            }
                        }
                    }
                });
                
                appState.charts.gauge = gaugeChart;
                
                // Atualizar o valor do gauge
                if (gaugeValue) gaugeValue.textContent = `${progress}%`;
                
            } catch (error) {
                console.error('Erro ao criar gráfico de gauge:', error);
            }
        }

        function initializeProjetosGaugeChart() {
            const projetosGaugeCtx = document.getElementById('projetosGaugeChart');
            if (!projetosGaugeCtx) return;
            
            try {
                const projetosGaugeValue = document.getElementById('projetosGaugeValue');
                if (projetosGaugeValue) projetosGaugeValue.textContent = '0%';
                
                // Calcular progresso médio dos projetos
                const totalProgress = appState.projects.reduce((sum, project) => sum + (project.progress || 0), 0);
                const averageProgress = appState.projects.length > 0 ? Math.round(totalProgress / appState.projects.length) : 0;
                
                // Criar gráfico de gauge para projetos
                const projetosGaugeChart = new Chart(projetosGaugeCtx.getContext('2d'), {
                    type: 'doughnut',
                    data: {
                        datasets: [{
                            data: [averageProgress, 100 - averageProgress],
                            backgroundColor: [
                                averageProgress > 70 ? '#28a745' : averageProgress > 40 ? '#ffc107' : '#dc3545',
                                '#e9ecef'
                            ],
                            borderWidth: 0,
                            circumference: 180,
                            rotation: 270
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '80%',
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                enabled: false
                            }
                        }
                    }
                });
                
                appState.charts.projetosGauge = projetosGaugeChart;
                
                // Atualizar o valor do gauge
                if (projetosGaugeValue) projetosGaugeValue.textContent = `${averageProgress}%`;
                
            } catch (error) {
                console.error('Erro ao criar gráfico de gauge de projetos:', error);
            }
        }

        function updateGaugeChart() {
            if (!appState.charts.gauge) return;
            
            // Atualizar dados do gauge
            const progress = Math.floor(Math.random() * 100);
            appState.charts.gauge.data.datasets[0].data = [progress, 100 - progress];
            appState.charts.gauge.data.datasets[0].backgroundColor[0] = 
                progress > 70 ? '#28a745' : progress > 40 ? '#ffc107' : '#dc3545';
            appState.charts.gauge.update();
            
            const gaugeValue = document.getElementById('gaugeValue');
            if (gaugeValue) gaugeValue.textContent = `${progress}%`;
        }

        function updateProjetosGaugeChart() {
            if (!appState.charts.projetosGauge) return;
            
            // Calcular progresso médio dos projetos
            const totalProgress = appState.projects.reduce((sum, project) => sum + (project.progress || 0), 0);
            const averageProgress = appState.projects.length > 0 ? Math.round(totalProgress / appState.projects.length) : 0;
            
            appState.charts.projetosGauge.data.datasets[0].data = [averageProgress, 100 - averageProgress];
            appState.charts.projetosGauge.data.datasets[0].backgroundColor[0] = 
                averageProgress > 70 ? '#28a745' : averageProgress > 40 ? '#ffc107' : '#dc3545';
            appState.charts.projetosGauge.update();
            
            const projetosGaugeValue = document.getElementById('projetosGaugeValue');
            if (projetosGaugeValue) projetosGaugeValue.textContent = `${averageProgress}%`;
        }

        // Event Listeners
        function setupBasicEventListeners() {
            // Botão de atualizar dashboard
            const refreshDashboardBtn = document.getElementById('refreshDashboard');
            if (refreshDashboardBtn) {
                refreshDashboardBtn.addEventListener('click', async () => {
                    refreshDashboardBtn.innerHTML = '<span class="loading-spinner"></span> Atualizando...';
                    refreshDashboardBtn.disabled = true;
                    
                    try {
                        await syncData();
                        showAlert('Dashboard atualizado com sucesso!', 'success');
                    } catch (error) {
                        console.error('Erro ao atualizar dashboard:', error);
                        showAlert('Erro ao atualizar dashboard', 'error');
                    } finally {
                        refreshDashboardBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Atualizar';
                        refreshDashboardBtn.disabled = false;
                    }
                });
            }
        }

        function setupEventListeners() {
            // Busca em tempo real
            setupSearchFunctionality();
            
            // Botões de exportação
            setupExportButtons();
            
            // Botões de importação CSV
            setupCSVImport();
            
            // Modal de funcionários
            setupEmployeeModal();
            
            // Modal de ramais
            setupExtensionModal();
            
            // Modal de ativos
            setupAssetModal();
            
            // Modal de férias
            setupVacationModal();
            
            // Modal de projetos
            setupProjectModal();
            
            // Alertas de férias
            setupVacationAlerts();
            
            // QR Code
            setupQRCodeFunctionality();
        }

        function setupSearchFunctionality() {
            // Busca de funcionários
            const searchEmployees = document.getElementById('searchEmployees');
            if (searchEmployees) {
                searchEmployees.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const rows = document.querySelectorAll('#employeesTableBody tr');
                    
                    rows.forEach(row => {
                        const text = row.textContent.toLowerCase();
                        row.style.display = text.includes(searchTerm) ? '' : 'none';
                    });
                });
            }
            
            // Busca de ramais
            const searchExtensions = document.getElementById('searchExtensions');
            if (searchExtensions) {
                searchExtensions.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const rows = document.querySelectorAll('#extensionsTableBody tr');
                    
                    rows.forEach(row => {
                        const text = row.textContent.toLowerCase();
                        row.style.display = text.includes(searchTerm) ? '' : 'none';
                    });
                });
            }
            
            // Busca de ativos
            const searchAssets = document.getElementById('searchAssets');
            if (searchAssets) {
                searchAssets.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const rows = document.querySelectorAll('#assetsTableBody tr');
                    
                    rows.forEach(row => {
                        const text = row.textContent.toLowerCase();
                        row.style.display = text.includes(searchTerm) ? '' : 'none';
                    });
                });
            }
            
            // Busca de férias
            const searchVacations = document.getElementById('searchVacations');
            if (searchVacations) {
                searchVacations.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const rows = document.querySelectorAll('#vacationsTableBody tr');
                    
                    rows.forEach(row => {
                        const text = row.textContent.toLowerCase();
                        row.style.display = text.includes(searchTerm) ? '' : 'none';
                    });
                });
            }
            
            // Busca de projetos
            const searchProjects = document.getElementById('searchProjects');
            if (searchProjects) {
                searchProjects.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const rows = document.querySelectorAll('#projectsTableBody tr');
                    
                    rows.forEach(row => {
                        const text = row.textContent.toLowerCase();
                        row.style.display = text.includes(searchTerm) ? '' : 'none';
                    });
                });
            }
        }

        function setupExportButtons() {
            // Exportar dashboard
            const exportPDF = document.getElementById('exportPDF');
            if (exportPDF) {
                exportPDF.addEventListener('click', () => exportDashboard('pdf'));
            }
            
            const exportExcel = document.getElementById('exportExcel');
            if (exportExcel) {
                exportExcel.addEventListener('click', () => exportDashboard('excel'));
            }
            
            // Exportar funcionários
            const exportEmployeesPDF = document.getElementById('exportEmployeesPDF');
            if (exportEmployeesPDF) {
                exportEmployeesPDF.addEventListener('click', () => exportEmployees('pdf'));
            }
            
            const exportEmployeesExcel = document.getElementById('exportEmployeesExcel');
            if (exportEmployeesExcel) {
                exportEmployeesExcel.addEventListener('click', () => exportEmployees('excel'));
            }
            
            const exportEmployeesListPDF = document.getElementById('exportEmployeesListPDF');
            if (exportEmployeesListPDF) {
                exportEmployeesListPDF.addEventListener('click', () => exportEmployees('pdf'));
            }
            
            const exportEmployeesListExcel = document.getElementById('exportEmployeesListExcel');
            if (exportEmployeesListExcel) {
                exportEmployeesListExcel.addEventListener('click', () => exportEmployees('excel'));
            }
            
            // Exportar ramais
            const exportExtensionsPDF = document.getElementById('exportExtensionsPDF');
            if (exportExtensionsPDF) {
                exportExtensionsPDF.addEventListener('click', () => exportExtensions('pdf'));
            }
            
            const exportExtensionsExcel = document.getElementById('exportExtensionsExcel');
            if (exportExtensionsExcel) {
                exportExtensionsExcel.addEventListener('click', () => exportExtensions('excel'));
            }
            
            // Exportar ativos
            const exportAssetsPDF = document.getElementById('exportAssetsPDF');
            if (exportAssetsPDF) {
                exportAssetsPDF.addEventListener('click', () => exportAssets('pdf'));
            }
            
            const exportAssetsExcel = document.getElementById('exportAssetsExcel');
            if (exportAssetsExcel) {
                exportAssetsExcel.addEventListener('click', () => exportAssets('excel'));
            }
            
            const exportAssetsListPDF = document.getElementById('exportAssetsListPDF');
            if (exportAssetsListPDF) {
                exportAssetsListPDF.addEventListener('click', () => exportAssets('pdf'));
            }
            
            const exportAssetsListExcel = document.getElementById('exportAssetsListExcel');
            if (exportAssetsListExcel) {
                exportAssetsListExcel.addEventListener('click', () => exportAssets('excel'));
            }
            
            // Exportar férias
            const exportVacationsListPDF = document.getElementById('exportVacationsListPDF');
            if (exportVacationsListPDF) {
                exportVacationsListPDF.addEventListener('click', () => exportVacations('pdf'));
            }
            
            const exportVacationsListExcel = document.getElementById('exportVacationsListExcel');
            if (exportVacationsListExcel) {
                exportVacationsListExcel.addEventListener('click', () => exportVacations('excel'));
            }
            
            // Exportar projetos
            const exportProjectsListPDF = document.getElementById('exportProjectsListPDF');
            if (exportProjectsListPDF) {
                exportProjectsListPDF.addEventListener('click', () => exportProjects('pdf'));
            }
            
            const exportProjectsListExcel = document.getElementById('exportProjectsListExcel');
            if (exportProjectsListExcel) {
                exportProjectsListExcel.addEventListener('click', () => exportProjects('excel'));
            }
        }

        function setupCSVImport() {
            // Importar funcionários CSV
            const importEmployeesCSV = document.getElementById('importEmployeesCSV');
            const csvEmployeesFileInput = document.getElementById('csvEmployeesFileInput');
            
            if (importEmployeesCSV && csvEmployeesFileInput) {
                importEmployeesCSV.addEventListener('click', () => {
                    csvEmployeesFileInput.click();
                });
                
                csvEmployeesFileInput.addEventListener('change', (event) => {
                    const file = event.target.files[0];
                    if (file) {
                        importEmployeesFromCSV(file);
                    }
                });
            }
            
            // Importar ativos CSV
            const importAssetsCSV = document.getElementById('importAssetsCSV');
            const csvFileInput = document.getElementById('csvFileInput');
            
            if (importAssetsCSV && csvFileInput) {
                importAssetsCSV.addEventListener('click', () => {
                    csvFileInput.click();
                });
                
                csvFileInput.addEventListener('change', (event) => {
                    const file = event.target.files[0];
                    if (file) {
                        importAssetsFromCSV(file);
                    }
                });
            }
        }

        function setupEmployeeModal() {
            const saveEmployeeBtn = document.getElementById('saveEmployee');
            if (saveEmployeeBtn) {
                saveEmployeeBtn.addEventListener('click', saveEmployee);
            }
        }

        function setupExtensionModal() {
            const saveExtensionBtn = document.getElementById('saveExtension');
            if (saveExtensionBtn) {
                saveExtensionBtn.addEventListener('click', saveExtension);
            }
        }

        function setupAssetModal() {
            const saveAssetBtn = document.getElementById('saveAsset');
            if (saveAssetBtn) {
                saveAssetBtn.addEventListener('click', saveAsset);
            }
            
            // Mostrar/ocultar campo de polegadas baseado no tipo de ativo
            const assetType = document.getElementById('assetType');
            if (assetType) {
                assetType.addEventListener('change', function() {
                    const inchesField = document.getElementById('assetInchesField');
                    if (inchesField) {
                        if (this.value === 'Monitor') {
                            inchesField.style.display = 'block';
                        } else {
                            inchesField.style.display = 'none';
                        }
                    }
                });
            }
        }

        function setupVacationModal() {
            const saveVacationBtn = document.getElementById('saveVacation');
            if (saveVacationBtn) {
                saveVacationBtn.addEventListener('click', saveVacation);
            }
        }

        function setupProjectModal() {
            const saveProjectBtn = document.getElementById('saveProject');
            if (saveProjectBtn) {
                saveProjectBtn.addEventListener('click', saveProject);
            }
            
            // Atualizar valor do progresso
            const projectProgress = document.getElementById('projectProgress');
            const projectProgressValue = document.getElementById('projectProgressValue');
            
            if (projectProgress && projectProgressValue) {
                projectProgress.addEventListener('input', function() {
                    projectProgressValue.textContent = this.value + '%';
                });
            }
        }

        function setupVacationAlerts() {
            const vacationAlertButton = document.getElementById('vacationAlertButton');
            if (vacationAlertButton) {
                vacationAlertButton.addEventListener('click', showVacationReturnModal);
            }
        }

        function setupQRCodeFunctionality() {
            const downloadQRCodeBtn = document.getElementById('downloadQRCodeBtn');
            if (downloadQRCodeBtn) {
                downloadQRCodeBtn.addEventListener('click', downloadQRCode);
            }
        }

        // Inicialização dos modais
        function initializeModals() {
            // Resetar formulários quando os modais são fechados
            const modals = [
                'addEmployeeModal',
                'addExtensionModal',
                'addAssetModal',
                'addVacationModal',
                'addProjectModal'
            ];
            
            modals.forEach(modalId => {
                const modal = document.getElementById(modalId);
                if (modal) {
                    modal.addEventListener('hidden.bs.modal', function() {
                        const form = this.querySelector('form');
                        if (form) form.reset();
                        appState.currentEditingId = null;
                        
                        // Resetar campos condicionais
                        const inchesField = document.getElementById('assetInchesField');
                        if (inchesField) inchesField.style.display = 'none';
                        
                        // Resetar valor do progresso
                        const projectProgressValue = document.getElementById('projectProgressValue');
                        if (projectProgressValue) projectProgressValue.textContent = '0%';
                    });
                }
            });
        }

        // Funcionalidades do ponto
        function initializePonto() {
            const calcularPontoBtn = document.getElementById('calcularPonto');
            if (calcularPontoBtn) {
                calcularPontoBtn.addEventListener('click', calcularPonto);
            }
        }

        function calcularPonto() {
            const entradaAuto = document.getElementById('entrada-auto').value;
            const jornadaType = parseFloat(document.getElementById('jornada-type').value);
            const intervaloAuto = parseInt(document.getElementById('intervalo-auto').value);
            const trabalhaSabado = document.getElementById('trabalha-sabado').checked;
            
            if (!entradaAuto) {
                showAlert('Por favor, informe o horário de entrada.', 'warning');
                return;
            }
            
            // Converter entrada para minutos desde meia-noite
            const [entradaHora, entradaMinuto] = entradaAuto.split(':').map(Number);
            const entradaMinutos = entradaHora * 60 + entradaMinuto;
            
            // Calcular horários
            const jornadaMinutos = jornadaType * 60;
            const saidaMinutos = entradaMinutos + jornadaMinutos;
            
            // Calcular intervalo (meio da jornada)
            const intervaloInicioMinutos = entradaMinutos + (jornadaMinutos / 2) - (intervaloAuto / 2);
            const intervaloFimMinutos = intervaloInicioMinutos + intervaloAuto;
            
            // Converter minutos para formato de hora
            const formatarHora = (minutos) => {
                const horas = Math.floor(minutos / 60) % 24;
                const mins = minutos % 60;
                return `${horas.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;
            };
            
            // Atualizar resultados
            document.getElementById('entrada-resultado').textContent = entradaAuto;
            document.getElementById('saida-intervalo-resultado').textContent = formatarHora(intervaloInicioMinutos);
            document.getElementById('retorno-intervalo-resultado').textContent = formatarHora(intervaloFimMinutos);
            document.getElementById('saida-resultado').textContent = formatarHora(saidaMinutos);
            
            // Mostrar resultado
            document.getElementById('resultado').style.display = 'block';
            
            // Verificar se o intervalo é suficiente
            const alertaIntervalo = document.getElementById('alerta-intervalo');
            if (intervaloAuto < 60) {
                alertaIntervalo.style.display = 'block';
                alertaIntervalo.querySelector('#alerta-intervalo-texto').textContent = 
                    'Intervalo mínimo de 1 hora não atingido!';
            } else {
                alertaIntervalo.style.display = 'none';
            }
            
            // Verificar horas extras (apenas para jornada de 8h)
            const tempoExtraContainer = document.getElementById('tempo-extra-container');
            if (jornadaType === 8 && saidaMinutos > 18 * 60) { // 18:00 = 1080 minutos
                const horasExtrasMinutos = saidaMinutos - (18 * 60);
                const horasExtras = (horasExtrasMinutos / 60).toFixed(2);
                document.getElementById('tempo-extra-resultado').textContent = `${horasExtras} horas`;
                tempoExtraContainer.style.display = 'block';
            } else {
                tempoExtraContainer.style.display = 'none';
            }
        }

        // Inicialização da seleção de ativos
        function initializeAssetSelection() {
            // Event listener para seleção/deseleção de ativos
            document.addEventListener('change', function(e) {
                if (e.target.classList.contains('asset-checkbox')) {
                    const assetId = parseInt(e.target.getAttribute('data-asset-id'));
                    
                    if (e.target.checked) {
                        appState.selectedAssets.add(assetId);
                    } else {
                        appState.selectedAssets.delete(assetId);
                    }
                    
                    updateSelectedCount();
                }
                
                // Selecionar/deselecionar todos
                if (e.target.id === 'selectAllCheckbox') {
                    const checkboxes = document.querySelectorAll('.asset-checkbox');
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = e.target.checked;
                        const assetId = parseInt(checkbox.getAttribute('data-asset-id'));
                        
                        if (e.target.checked) {
                            appState.selectedAssets.add(assetId);
                        } else {
                            appState.selectedAssets.delete(assetId);
                        }
                    });
                    
                    updateSelectedCount();
                }
            });
            
            // Botões de seleção em lote
            const selectAllBtn = document.getElementById('selectAllAssets');
            if (selectAllBtn) {
                selectAllBtn.addEventListener('click', function() {
                    const checkboxes = document.querySelectorAll('.asset-checkbox');
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = true;
                        const assetId = parseInt(checkbox.getAttribute('data-asset-id'));
                        appState.selectedAssets.add(assetId);
                    });
                    
                    updateSelectedCount();
                });
            }
            
            const deselectAllBtn = document.getElementById('deselectAllAssets');
            if (deselectAllBtn) {
                deselectAllBtn.addEventListener('click', function() {
                    const checkboxes = document.querySelectorAll('.asset-checkbox');
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = false;
                        const assetId = parseInt(checkbox.getAttribute('data-asset-id'));
                        appState.selectedAssets.delete(assetId);
                    });
                    
                    updateSelectedCount();
                });
            }
            
            // Botão de exportar QR Codes em lote
            const exportQRCodeBatchBtn = document.getElementById('exportQRCodeBatch');
            if (exportQRCodeBatchBtn) {
                exportQRCodeBatchBtn.addEventListener('click', exportQRCodeBatchHandler);
            }
        }

        function updateSelectedCount() {
            const selectedCount = document.getElementById('selectedCount');
            const batchActions = document.getElementById('batchActions');
            
            if (selectedCount) selectedCount.textContent = appState.selectedAssets.size;
            
            if (batchActions) {
                if (appState.selectedAssets.size > 0) {
                    batchActions.classList.add('active');
                } else {
                    batchActions.classList.remove('active');
                }
            }
            
            // Atualizar checkbox "Selecionar Todos"
            const selectAllCheckbox = document.getElementById('selectAllCheckbox');
            if (selectAllCheckbox) {
                const totalCheckboxes = document.querySelectorAll('.asset-checkbox').length;
                selectAllCheckbox.checked = appState.selectedAssets.size === totalCheckboxes && totalCheckboxes > 0;
                selectAllCheckbox.indeterminate = appState.selectedAssets.size > 0 && appState.selectedAssets.size < totalCheckboxes;
            }
        }

        // Funções de CRUD para Funcionários
        async function saveEmployee() {
            const form = document.getElementById('employeeForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }
            
            const employeeData = {
                name: formatName(document.getElementById('employeeName').value),
                email: document.getElementById('employeeEmail').value.toLowerCase(),
                position: document.getElementById('employeePosition').value,
                department: document.getElementById('employeeDepartment').value,
                status: document.getElementById('employeeStatus').value
            };
            
            try {
                let result;
                
                if (appState.currentEditingId) {
                    // Atualizar funcionário existente
                    result = await supabase
                        .from('employees')
                        .update(employeeData)
                        .eq('id', appState.currentEditingId);
                } else {
                    // Inserir novo funcionário
                    result = await supabase
                        .from('employees')
                        .insert([employeeData]);
                }
                
                if (result.error) throw result.error;
                
                // Fechar modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addEmployeeModal'));
                modal.hide();
                
                // Recarregar dados
                await loadAllData();
                
                showAlert(
                    appState.currentEditingId ? 'Funcionário atualizado com sucesso!' : 'Funcionário cadastrado com sucesso!',
                    'success'
                );
                
                appState.currentEditingId = null;
                
            } catch (error) {
                console.error('Erro ao salvar funcionário:', error);
                showAlert('Erro ao salvar funcionário: ' + error.message, 'error');
            }
        }

        function editEmployee(id) {
            const employee = appState.employees.find(emp => emp.id === id);
            if (!employee) return;
            
            appState.currentEditingId = id;
            
            // Preencher formulário
            document.getElementById('employeeName').value = employee.name;
            document.getElementById('employeeEmail').value = employee.email;
            document.getElementById('employeePosition').value = employee.position;
            document.getElementById('employeeDepartment').value = employee.department;
            document.getElementById('employeeStatus').value = employee.status;
            
            // Abrir modal
            const modal = new bootstrap.Modal(document.getElementById('addEmployeeModal'));
            modal.show();
        }

        async function deleteEmployee(id) {
            if (!confirm('Tem certeza que deseja excluir este funcionário?')) return;
            
            try {
                const { error } = await supabase
                    .from('employees')
                    .delete()
                    .eq('id', id);
                
                if (error) throw error;
                
                // Recarregar dados
                await loadAllData();
                
                showAlert('Funcionário excluído com sucesso!', 'success');
                
            } catch (error) {
                console.error('Erro ao excluir funcionário:', error);
                showAlert('Erro ao excluir funcionário: ' + error.message, 'error');
            }
        }

        // Funções de CRUD para Ramais
        async function saveExtension() {
            const form = document.getElementById('extensionForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }
            
            const extensionData = {
                number: document.getElementById('extensionNumber').value,
                employee_id: parseInt(document.getElementById('extensionEmployee').value),
                location: document.getElementById('extensionLocation').value,
                status: document.getElementById('extensionStatus').value
            };
            
            try {
                let result;
                
                if (appState.currentEditingId) {
                    // Atualizar ramal existente
                    result = await supabase
                        .from('extensions')
                        .update(extensionData)
                        .eq('id', appState.currentEditingId);
                } else {
                    // Inserir novo ramal
                    result = await supabase
                        .from('extensions')
                        .insert([extensionData]);
                }
                
                if (result.error) throw result.error;
                
                // Fechar modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addExtensionModal'));
                modal.hide();
                
                // Recarregar dados
                await loadAllData();
                
                showAlert(
                    appState.currentEditingId ? 'Ramal atualizado com sucesso!' : 'Ramal cadastrado com sucesso!',
                    'success'
                );
                
                appState.currentEditingId = null;
                
            } catch (error) {
                console.error('Erro ao salvar ramal:', error);
                showAlert('Erro ao salvar ramal: ' + error.message, 'error');
            }
        }

        function editExtension(id) {
            const extension = appState.extensions.find(ext => ext.id === id);
            if (!extension) return;
            
            appState.currentEditingId = id;
            
            // Preencher formulário
            document.getElementById('extensionNumber').value = extension.number;
            document.getElementById('extensionEmployee').value = extension.employee_id;
            document.getElementById('extensionLocation').value = extension.location || '';
            document.getElementById('extensionStatus').value = extension.status;
            
            // Abrir modal
            const modal = new bootstrap.Modal(document.getElementById('addExtensionModal'));
            modal.show();
        }

        async function deleteExtension(id) {
            if (!confirm('Tem certeza que deseja excluir este ramal?')) return;
            
            try {
                const { error } = await supabase
                    .from('extensions')
                    .delete()
                    .eq('id', id);
                
                if (error) throw error;
                
                // Recarregar dados
                await loadAllData();
                
                showAlert('Ramal excluído com sucesso!', 'success');
                
            } catch (error) {
                console.error('Erro ao excluir ramal:', error);
                showAlert('Erro ao excluir ramal: ' + error.message, 'error');
            }
        }

        // Funções de CRUD para Ativos
        async function saveAsset() {
            const form = document.getElementById('assetForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }
            
            const assetData = {
                name: document.getElementById('assetName').value,
                type: document.getElementById('assetType').value,
                model: document.getElementById('assetModel').value,
                description: document.getElementById('assetDescription').value,
                serial_number: document.getElementById('assetSerial').value,
                employee_id: document.getElementById('assetEmployee').value ? parseInt(document.getElementById('assetEmployee').value) : null,
                acquisition_date: document.getElementById('assetAcquisition').value || null,
                status: document.getElementById('assetStatus').value
            };
            
            // Adicionar polegadas apenas para monitores
            if (document.getElementById('assetType').value === 'Monitor') {
                assetData.inches = parseInt(document.getElementById('assetInches').value) || null;
            }
            
            try {
                let result;
                
                if (appState.currentEditingId) {
                    // Atualizar ativo existente
                    result = await supabase
                        .from('assets')
                        .update(assetData)
                        .eq('id', appState.currentEditingId);
                } else {
                    // Inserir novo ativo
                    result = await supabase
                        .from('assets')
                        .insert([assetData]);
                }
                
                if (result.error) throw result.error;
                
                // Fechar modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addAssetModal'));
                modal.hide();
                
                // Recarregar dados
                await loadAllData();
                
                showAlert(
                    appState.currentEditingId ? 'Ativo atualizado com sucesso!' : 'Ativo cadastrado com sucesso!',
                    'success'
                );
                
                appState.currentEditingId = null;
                
            } catch (error) {
                console.error('Erro ao salvar ativo:', error);
                showAlert('Erro ao salvar ativo: ' + error.message, 'error');
            }
        }

        function editAsset(id) {
            const asset = appState.assets.find(ast => ast.id === id);
            if (!asset) return;
            
            appState.currentEditingId = id;
            
            // Preencher formulário
            document.getElementById('assetName').value = asset.name;
            document.getElementById('assetType').value = asset.type;
            document.getElementById('assetModel').value = asset.model || '';
            document.getElementById('assetDescription').value = asset.description || '';
            document.getElementById('assetSerial').value = asset.serial_number || '';
            document.getElementById('assetEmployee').value = asset.employee_id || '';
            document.getElementById('assetAcquisition').value = formatDateForInput(asset.acquisition_date);
            document.getElementById('assetStatus').value = asset.status;
            
            // Mostrar/ocultar campo de polegadas
            const inchesField = document.getElementById('assetInchesField');
            if (inchesField) {
                if (asset.type === 'Monitor') {
                    inchesField.style.display = 'block';
                    document.getElementById('assetInches').value = asset.inches || '';
                } else {
                    inchesField.style.display = 'none';
                }
            }
            
            // Abrir modal
            const modal = new bootstrap.Modal(document.getElementById('addAssetModal'));
            modal.show();
        }

        async function deleteAsset(id) {
            if (!confirm('Tem certeza que deseja excluir este ativo?')) return;
            
            try {
                const { error } = await supabase
                    .from('assets')
                    .delete()
                    .eq('id', id);
                
                if (error) throw error;
                
                // Recarregar dados
                await loadAllData();
                
                showAlert('Ativo excluído com sucesso!', 'success');
                
            } catch (error) {
                console.error('Erro ao excluir ativo:', error);
                showAlert('Erro ao excluir ativo: ' + error.message, 'error');
            }
        }

        // Funções de CRUD para Férias
        async function saveVacation() {
            const form = document.getElementById('vacationForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }
            
            const startDate = new Date(document.getElementById('vacationStart').value);
            const endDate = new Date(document.getElementById('vacationEnd').value);
            
            // Validar datas
            if (startDate >= endDate) {
                showAlert('A data de término deve ser posterior à data de início.', 'warning');
                return;
            }
            
            // Calcular dias de férias
            const timeDiff = endDate.getTime() - startDate.getTime();
            const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1; // +1 para incluir o dia inicial
            
            const vacationData = {
                employee_id: parseInt(document.getElementById('vacationEmployee').value),
                start_date: document.getElementById('vacationStart').value,
                end_date: document.getElementById('vacationEnd').value,
                days: daysDiff,
                status: document.getElementById('vacationStatus').value
            };
            
            try {
                let result;
                
                if (appState.currentEditingId) {
                    // Atualizar férias existentes
                    result = await supabase
                        .from('vacations')
                        .update(vacationData)
                        .eq('id', appState.currentEditingId);
                } else {
                    // Inserir novas férias
                    result = await supabase
                        .from('vacations')
                        .insert([vacationData]);
                }
                
                if (result.error) throw result.error;
                
                // Fechar modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addVacationModal'));
                modal.hide();
                
                // Recarregar dados
                await loadAllData();
                
                showAlert(
                    appState.currentEditingId ? 'Férias atualizadas com sucesso!' : 'Férias cadastradas com sucesso!',
                    'success'
                );
                
                appState.currentEditingId = null;
                
            } catch (error) {
                console.error('Erro ao salvar férias:', error);
                showAlert('Erro ao salvar férias: ' + error.message, 'error');
            }
        }

        function editVacation(id) {
            const vacation = appState.vacations.find(vac => vac.id === id);
            if (!vacation) return;
            
            appState.currentEditingId = id;
            
            // Preencher formulário
            document.getElementById('vacationEmployee').value = vacation.employee_id;
            document.getElementById('vacationStart').value = formatDateForInput(vacation.start_date);
            document.getElementById('vacationEnd').value = formatDateForInput(vacation.end_date);
            document.getElementById('vacationStatus').value = vacation.status;
            
            // Abrir modal
            const modal = new bootstrap.Modal(document.getElementById('addVacationModal'));
            modal.show();
        }

        async function deleteVacation(id) {
            if (!confirm('Tem certeza que deseja excluir esta solicitação de férias?')) return;
            
            try {
                const { error } = await supabase
                    .from('vacations')
                    .delete()
                    .eq('id', id);
                
                if (error) throw error;
                
                // Recarregar dados
                await loadAllData();
                
                showAlert('Solicitação de férias excluída com sucesso!', 'success');
                
            } catch (error) {
                console.error('Erro ao excluir férias:', error);
                showAlert('Erro ao excluir férias: ' + error.message, 'error');
            }
        }

        // Funções de CRUD para Projetos
        async function saveProject() {
            const form = document.getElementById('projectForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }
            
            const startDate = new Date(document.getElementById('projectStart').value);
            const deadline = new Date(document.getElementById('projectDeadline').value);
            
            // Validar datas
            if (startDate >= deadline) {
                showAlert('O prazo deve ser posterior à data de início.', 'warning');
                return;
            }
            
            const projectData = {
                name: document.getElementById('projectName').value,
                description: document.getElementById('projectDescription').value,
                manager_id: parseInt(document.getElementById('projectResponsible').value),
                start_date: document.getElementById('projectStart').value,
                deadline: document.getElementById('projectDeadline').value,
                priority: document.getElementById('projectPriority').value,
                progress: parseInt(document.getElementById('projectProgress').value),
                status: document.getElementById('projectStatus').value
            };
            
            try {
                let result;
                
                if (appState.currentEditingId) {
                    // Atualizar projeto existente
                    result = await supabase
                        .from('projects')
                        .update(projectData)
                        .eq('id', appState.currentEditingId);
                } else {
                    // Inserir novo projeto
                    result = await supabase
                        .from('projects')
                        .insert([projectData]);
                }
                
                if (result.error) throw result.error;
                
                // Fechar modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addProjectModal'));
                modal.hide();
                
                // Recarregar dados
                await loadAllData();
                
                showAlert(
                    appState.currentEditingId ? 'Projeto atualizado com sucesso!' : 'Projeto cadastrado com sucesso!',
                    'success'
                );
                
                appState.currentEditingId = null;
                
            } catch (error) {
                console.error('Erro ao salvar projeto:', error);
                showAlert('Erro ao salvar projeto: ' + error.message, 'error');
            }
        }

        function editProject(id) {
            const project = appState.projects.find(proj => proj.id === id);
            if (!project) return;
            
            appState.currentEditingId = id;
            
            // Preencher formulário
            document.getElementById('projectName').value = project.name;
            document.getElementById('projectDescription').value = project.description || '';
            document.getElementById('projectResponsible').value = project.manager_id;
            document.getElementById('projectStart').value = formatDateForInput(project.start_date);
            document.getElementById('projectDeadline').value = formatDateForInput(project.deadline);
            document.getElementById('projectPriority').value = project.priority;
            document.getElementById('projectProgress').value = project.progress || 0;
            document.getElementById('projectStatus').value = project.status;
            
            // Atualizar valor do progresso
            const projectProgressValue = document.getElementById('projectProgressValue');
            if (projectProgressValue) projectProgressValue.textContent = (project.progress || 0) + '%';
            
            // Abrir modal
            const modal = new bootstrap.Modal(document.getElementById('addProjectModal'));
            modal.show();
        }

        async function deleteProject(id) {
            if (!confirm('Tem certeza que deseja excluir este projeto?')) return;
            
            try {
                const { error } = await supabase
                    .from('projects')
                    .delete()
                    .eq('id', id);
                
                if (error) throw error;
                
                // Recarregar dados
                await loadAllData();
                
                showAlert('Projeto excluído com sucesso!', 'success');
                
            } catch (error) {
                console.error('Erro ao excluir projeto:', error);
                showAlert('Erro ao excluir projeto: ' + error.message, 'error');
            }
        }

        // Funcionalidades de QR Code
        async function generateQRCode(assetId) {
            const asset = appState.assets.find(a => a.id === assetId);
            if (!asset) {
                showAlert('Ativo não encontrado!', 'error');
                return;
            }

            try {
                // Preparar dados para o QR Code
                const qrData = {
                    id: asset.id,
                    name: asset.name,
                    type: asset.type,
                    model: asset.model,
                    serial: asset.serial_number,
                    status: asset.status
                };

                const qrDataString = JSON.stringify(qrData);
                
                // Codificar os dados para URL
                const encodedData = encodeURIComponent(qrDataString);
                
                // Tamanho do QR code (200x200 pixels)
                const size = '200x200';
                
                // Construir a URL da API do QR Server
                const apiUrl = `https://api.qrserver.com/v1/create-qr-code/?data=${encodedData}&size=${size}&format=png`;

                const qrCodeDiv = document.getElementById('qrCodePreview');
                const qrAssetInfo = document.getElementById('qrAssetInfo');
                
                if (!qrCodeDiv || !qrAssetInfo) {
                    showAlert('Elementos do QR Code não encontrados!', 'error');
                    return;
                }

                // Limpar conteúdo anterior
                qrCodeDiv.innerHTML = '';

                // Criar elemento de imagem
                const img = document.createElement('img');
                img.src = apiUrl;
                img.alt = 'QR Code';
                img.style.width = '100%';
                img.style.maxWidth = '200px';
                img.style.height = 'auto';

                qrCodeDiv.appendChild(img);

                // Adicionar informações do ativo
                qrAssetInfo.innerHTML = `
                    <p><strong>Nome:</strong> ${asset.name}</p>
                    <p><strong>Tipo:</strong> ${asset.type}</p>
                    <p><strong>Modelo:</strong> ${asset.model || 'N/A'}</p>
                    <p><strong>Nº Série:</strong> ${asset.serial_number || 'N/A'}</p>
                    <p><strong>Status:</strong> ${asset.status}</p>
                `;

                // Armazenar QR Code atual
                appState.currentQRCode = {
                    url: apiUrl,
                    asset: asset
                };

                // Mostrar modal
                const modal = new bootstrap.Modal(document.getElementById('viewQRCodeModal'));
                modal.show();

            } catch (error) {
                console.error('Erro ao gerar QR Code:', error);
                showAlert('Erro ao gerar QR Code: ' + error.message, 'error');
            }
        }

        function downloadQRCode() {
            if (!appState.currentQRCode || !appState.currentQRCode.url) {
                showAlert('Nenhum QR Code para baixar!', 'error');
                return;
            }

            try {
                const url = appState.currentQRCode.url;
                const asset = appState.currentQRCode.asset;
                
                // Criar link de download
                const link = document.createElement('a');
                link.download = `QRCode_${asset.name.replace(/\s+/g, '_')}.png`;
                link.href = url;
                link.click();

                showAlert('QR Code baixado com sucesso!', 'success');

            } catch (error) {
                console.error('Erro ao baixar QR Code:', error);
                showAlert('Erro ao baixar QR Code: ' + error.message, 'error');
            }
        }

        async function exportQRCodeBatchHandler() {
            if (appState.selectedAssets.size === 0) {
                showAlert('Selecione pelo menos um ativo para gerar QR Codes!', 'warning');
                return;
            }

            try {
                // Criar um PDF com todos os QR Codes
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();

                let yPosition = 20;
                let xPosition = 20;
                let itemsPerRow = 0;

                // Para cada ativo selecionado, gerar o QR code
                for (const assetId of appState.selectedAssets) {
                    const asset = appState.assets.find(a => a.id === assetId);
                    if (!asset) continue;

                    // Preparar dados para o QR Code
                    const qrData = {
                        id: asset.id,
                        name: asset.name,
                        type: asset.type,
                        model: asset.model,
                        serial: asset.serial_number,
                        status: asset.status
                    };

                    const qrDataString = JSON.stringify(qrData);
                    const encodedData = encodeURIComponent(qrDataString);
                    const size = '100x100'; // Tamanho menor para o lote
                    const apiUrl = `https://api.qrserver.com/v1/create-qr-code/?data=${encodedData}&size=${size}&format=png`;

                    // Carregar a imagem a partir da URL
                    const img = await loadImage(apiUrl);

                    // Adicionar QR Code ao PDF
                    doc.addImage(img, 'PNG', xPosition, yPosition, 40, 40);

                    // Adicionar informações do ativo
                    doc.setFontSize(8);
                    doc.text(asset.name, xPosition, yPosition + 45, { maxWidth: 40 });

                    xPosition += 50;
                    itemsPerRow++;

                    // Nova linha após 3 itens
                    if (itemsPerRow >= 3) {
                        xPosition = 20;
                        yPosition += 60;
                        itemsPerRow = 0;

                        // Nova página se necessário
                        if (yPosition > 250) {
                            doc.addPage();
                            yPosition = 20;
                        }
                    }
                }

                // Salvar PDF
                const dateStr = new Date().toISOString().split('T')[0];
                doc.save(`QR_Codes_Ativos_${dateStr}.pdf`);

                showAlert(`${appState.selectedAssets.size} QR Codes exportados com sucesso!`, 'success');

            } catch (error) {
                console.error('Erro ao exportar QR Codes em lote:', error);
                showAlert('Erro ao exportar QR Codes em lote: ' + error.message, 'error');
            }
        }

        // Função auxiliar para carregar uma imagem a partir de uma URL
        function loadImage(url) {
            return new Promise((resolve, reject) => {
                const img = new Image();
                img.crossOrigin = 'Anonymous'; // Para evitar problemas de CORS
                img.onload = () => resolve(img);
                img.onerror = reject;
                img.src = url;
            });
        }

        // Funcionalidades de alerta de férias
        function checkVacationAlerts() {
            const today = new Date();
            const alerts = [];
            
            appState.vacations.forEach(vacation => {
                if (vacation.status === 'Em Andamento') {
                    const endDate = new Date(vacation.end_date);
                    const timeDiff = endDate.getTime() - today.getTime();
                    const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
                    
                    // Alertar sobre retorno em até 3 dias
                    if (daysDiff >= 0 && daysDiff <= 3) {
                        const employee = appState.employees.find(emp => emp.id === vacation.employee_id);
                        if (employee) {
                            alerts.push({
                                employee: employee.name,
                                returnDate: formatDate(vacation.end_date),
                                daysUntilReturn: daysDiff
                            });
                        }
                    }
                }
            });
            
            // Atualizar contador de alertas
            const vacationAlertCount = document.getElementById('vacationAlertCount');
            if (vacationAlertCount) {
                vacationAlertCount.textContent = alerts.length;
                vacationAlertCount.style.display = alerts.length > 0 ? 'block' : 'none';
            }
            
            // Armazenar alertas para exibição no modal
            appState.vacationAlerts = alerts;
        }

        function showVacationReturnModal() {
            const alerts = appState.vacationAlerts || [];
            const modalBody = document.getElementById('vacationReturnAlerts');
            
            if (!modalBody) return;
            
            if (alerts.length === 0) {
                modalBody.innerHTML = '<p class="text-center">Nenhum alerta de retorno de férias no momento.</p>';
            } else {
                modalBody.innerHTML = alerts.map(alert => `
                    <div class="vacation-alert-item">
                        <h6>${alert.employee}</h6>
                        <p>Retorna em ${alert.daysUntilReturn} dias (${alert.returnDate})</p>
                    </div>
                `).join('');
            }
            
            const modal = new bootstrap.Modal(document.getElementById('vacationReturnModal'));
            modal.show();
        }

        // Funcionalidades de exportação
        async function exportDashboard(format) {
            try {
                if (format === 'pdf') {
                    await exportDashboardToPDF();
                } else if (format === 'excel') {
                    await exportDashboardToExcel();
                }
            } catch (error) {
                console.error('Erro ao exportar dashboard:', error);
                showAlert('Erro ao exportar dashboard: ' + error.message, 'error');
            }
        }

        async function exportDashboardToPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            // Adicionar título
            doc.setFontSize(20);
            doc.text('Dashboard - Sistema de Gestão', 20, 20);
            
            // Adicionar data
            doc.setFontSize(12);
            doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, 20, 30);
            
            // Adicionar estatísticas
            doc.setFontSize(16);
            doc.text('Estatísticas Gerais', 20, 50);
            
            doc.setFontSize(12);
            let yPosition = 65;
            doc.text(`• Total de Funcionários: ${appState.employees.length}`, 20, yPosition);
            yPosition += 10;
            doc.text(`• Total de Ativos: ${appState.assets.length}`, 20, yPosition);
            yPosition += 10;
            doc.text(`• Férias Ativas: ${appState.vacations.filter(v => v.status === 'Em Andamento').length}`, 20, yPosition);
            yPosition += 10;
            doc.text(`• Projetos Ativos: ${appState.projects.filter(p => p.status === 'Em Andamento').length}`, 20, yPosition);
            
            // Adicionar gráficos (captura de tela)
            try {
                const canvas = await html2canvas(document.querySelector('#dashboardSection'));
                const imgData = canvas.toDataURL('image/png');
                
                // Adicionar nova página para o gráfico
                doc.addPage();
                doc.addImage(imgData, 'PNG', 10, 10, 190, 0);
            } catch (error) {
                console.error('Erro ao capturar gráficos:', error);
            }
            
            // Salvar PDF
            doc.save(`dashboard_${new Date().toISOString().split('T')[0]}.pdf`);
            showAlert('Dashboard exportado para PDF com sucesso!', 'success');
        }

        async function exportDashboardToExcel() {
            // Criar workbook
            const wb = XLSX.utils.book_new();
            
            // Dados do dashboard
            const dashboardData = [
                ['Métrica', 'Valor'],
                ['Total de Funcionários', appState.employees.length],
                ['Total de Ativos', appState.assets.length],
                ['Férias Ativas', appState.vacations.filter(v => v.status === 'Em Andamento').length],
                ['Projetos Ativos', appState.projects.filter(p => p.status === 'Em Andamento').length],
                ['Ramais Cadastrados', appState.extensions.length]
            ];
            
            // Adicionar worksheet
            const ws = XLSX.utils.aoa_to_sheet(dashboardData);
            XLSX.utils.book_append_sheet(wb, ws, 'Dashboard');
            
            // Salvar arquivo
            XLSX.writeFile(wb, `dashboard_${new Date().toISOString().split('T')[0]}.xlsx`);
            showAlert('Dashboard exportado para Excel com sucesso!', 'success');
        }

        async function exportEmployees(format) {
            try {
                if (format === 'pdf') {
                    await exportEmployeesToPDF();
                } else if (format === 'excel') {
                    await exportEmployeesToExcel();
                }
            } catch (error) {
                console.error('Erro ao exportar funcionários:', error);
                showAlert('Erro ao exportar funcionários: ' + error.message, 'error');
            }
        }

        async function exportEmployeesToPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            // Adicionar título
            doc.setFontSize(20);
            doc.text('Lista de Funcionários', 20, 20);
            doc.setFontSize(12);
            doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, 20, 30);
            
            // Preparar dados da tabela
            const tableData = appState.employees.map(emp => [
                `#EMP-${emp.id.toString().padStart(3, '0')}`,
                emp.name,
                emp.email,
                emp.position,
                emp.department,
                emp.status
            ]);
            
            // Adicionar tabela
            doc.autoTable({
                startY: 40,
                head: [['ID', 'Nome', 'Email', 'Cargo', 'Departamento', 'Status']],
                body: tableData,
                styles: { fontSize: 8 },
                headStyles: { fillColor: [67, 97, 238] }
            });
            
            // Salvar PDF
            doc.save(`funcionarios_${new Date().toISOString().split('T')[0]}.pdf`);
            showAlert('Funcionários exportados para PDF com sucesso!', 'success');
        }

        async function exportEmployeesToExcel() {
            // Preparar dados
            const data = appState.employees.map(emp => ({
                'ID': `#EMP-${emp.id.toString().padStart(3, '0')}`,
                'Nome': emp.name,
                'Email': emp.email,
                'Cargo': emp.position,
                'Departamento': emp.department,
                'Status': emp.status
            }));
            
            // Criar worksheet
            const ws = XLSX.utils.json_to_sheet(data);
            
            // Criar workbook e adicionar worksheet
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Funcionários');
            
            // Salvar arquivo
            XLSX.writeFile(wb, `funcionarios_${new Date().toISOString().split('T')[0]}.xlsx`);
            showAlert('Funcionários exportados para Excel com sucesso!', 'success');
        }

        // Funções de exportação para outras entidades (similares às de funcionários)
        async function exportExtensions(format) {
            // Implementação similar à exportEmployees
            showAlert('Funcionalidade de exportação de ramais em desenvolvimento', 'info');
        }

        async function exportAssets(format) {
            // Implementação similar à exportEmployees
            showAlert('Funcionalidade de exportação de ativos em desenvolvimento', 'info');
        }

        async function exportVacations(format) {
            // Implementação similar à exportEmployees
            showAlert('Funcionalidade de exportação de férias em desenvolvimento', 'info');
        }

        async function exportProjects(format) {
            // Implementação similar à exportEmployees
            showAlert('Funcionalidade de exportação de projetos em desenvolvimento', 'info');
        }

        // Funcionalidades de importação CSV
        async function importEmployeesFromCSV(file) {
            try {
                const reader = new FileReader();
                
                reader.onload = async function(e) {
                    const csvData = e.target.result;
                    const rows = csvData.split('\n').slice(1); // Pular cabeçalho
                    
                    let importedCount = 0;
                    let errorCount = 0;
                    
                    for (const row of rows) {
                        if (!row.trim()) continue;
                        
                        const columns = row.split(',').map(col => col.trim().replace(/^"|"$/g, ''));
                        
                        if (columns.length >= 4) {
                            const employeeData = {
                                name: formatName(columns[0]),
                                email: columns[1].toLowerCase(),
                                position: columns[2],
                                department: columns[3],
                                status: columns[4] || 'Ativo'
                            };
                            
                            try {
                                const { error } = await supabase
                                    .from('employees')
                                    .insert([employeeData]);
                                
                                if (error) throw error;
                                importedCount++;
                            } catch (error) {
                                console.error('Erro ao importar funcionário:', error);
                                errorCount++;
                            }
                        }
                    }
                    
                    // Recarregar dados
                    await loadAllData();
                    
                    showAlert(
                        `Importação concluída: ${importedCount} funcionários importados, ${errorCount} erros.`,
                        importedCount > 0 ? 'success' : 'warning'
                    );
                };
                
                reader.readAsText(file);
                
            } catch (error) {
                console.error('Erro ao importar CSV:', error);
                showAlert('Erro ao importar arquivo CSV: ' + error.message, 'error');
            }
        }

        async function importAssetsFromCSV(file) {
            try {
                const reader = new FileReader();
                
                reader.onload = async function(e) {
                    const csvData = e.target.result;
                    const rows = csvData.split('\n').slice(1); // Pular cabeçalho
                    
                    let importedCount = 0;
                    let errorCount = 0;
                    
                    for (const row of rows) {
                        if (!row.trim()) continue;
                        
                        const columns = row.split(',').map(col => col.trim().replace(/^"|"$/g, ''));
                        
                        if (columns.length >= 3) {
                            const assetData = {
                                name: columns[0],
                                type: columns[1],
                                model: columns[2],
                                description: columns[3] || '',
                                serial_number: columns[4] || '',
                                status: columns[5] || 'Ativo'
                            };
                            
                            // Adicionar polegadas para monitores
                            if (assetData.type === 'Monitor' && columns[6]) {
                                assetData.inches = parseInt(columns[6]);
                            }
                            
                            try {
                                const { error } = await supabase
                                    .from('assets')
                                    .insert([assetData]);
                                
                                if (error) throw error;
                                importedCount++;
                            } catch (error) {
                                console.error('Erro ao importar ativo:', error);
                                errorCount++;
                            }
                        }
                    }
                    
                    // Recarregar dados
                    await loadAllData();
                    
                    showAlert(
                        `Importação concluída: ${importedCount} ativos importados, ${errorCount} erros.`,
                        importedCount > 0 ? 'success' : 'warning'
                    );
                };
                
                reader.readAsText(file);
                
            } catch (error) {
                console.error('Erro ao importar CSV:', error);
                showAlert('Erro ao importar arquivo CSV: ' + error.message, 'error');
            }
        }

        // Limpeza ao sair
        window.addEventListener('beforeunload', () => {
            if (appState.syncInterval) {
                clearInterval(appState.syncInterval);
            }
        });
    </script>
</body>
</html>